<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>ZORO.X</title><link>https://zorox.me</link><description>This is a salted fish coder developed website which mainly records and shares coding notes, random thoughts.</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Sun, 16 Oct 2022 04:52:31 +0000</lastBuildDate><item><title>我们都是「乌合之众」</title><link>https://zorox.me/post/2022/wu-he-zhi-zhong.html</link><description>&lt;p&gt;刚刚读完了一本俗称社会心理学的经典著作，就是古斯塔夫·勒庞写的《乌合之众》，其实早在大学读书的时候就已经听说过这本书，但是当时只是随便翻阅了几页，觉得枯燥无味之后就放弃了。那时候对于这些社会心理学以及那些长篇论道的书都不太感冒，只喜欢读一些小说，因为在读小说的时候不用动太多脑筋，讲究所谓的「爽」就行了。&lt;/p&gt;
&lt;p&gt;最近在网上看到有人在推荐这本书，于是又重新耐着性子，断断续续花了6个多小时读完了这本书。这本书提出了一个叫做「群体」的概念，所谓群体，不是指一群人聚集在一起便是群体。而是当&lt;strong&gt;一群人聚集在一起之后，他们的情感和思想方向一致，个性几乎消失，表现出一种短暂的集体心理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;书中提出了所谓「群体」的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身在群体的人的要比单独一个人时大脑智力水平低下。&lt;/li&gt;
&lt;li&gt;群体里的人容易情绪化，急躁易怒，无法理性思考。&lt;/li&gt;
&lt;li&gt;群体里的人敢做一些个人不敢做的事情，这些事情包括暴力和犯罪，因为责任被群体分担和淡化了。&lt;/li&gt;
&lt;li&gt;群体容易被煽动，容易收到一些不正常的暗示所影响，容易走极端。&lt;/li&gt;
&lt;li&gt;群体里的人容易被同化，个人的独特个性会逐渐被群体的个性所取代。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在读的时候觉得作者对群体充满了鄙夷，如果我在年轻个几岁，年轻到尚在大学读书或者更早，我大概会对作者嗤之以鼻，这么露骨的贬低一群人，这不就是一个偏激狂嘛。虽然现在再看的时候仍然觉得有点偏激，但是结合当今的网络环境以及社会生活，作者对于群体的那些评价大多数还是很中肯的。&lt;/p&gt;
&lt;p&gt;如今在一些社交平台上，随便一件事情都可以吵的不可开交，在这件事情尚未公布真正的真相之前，网友们根据自己的想象添砖加瓦，然后以为自己以为的就是正确的，并大肆宣传。其他人看到这些，不加以判断就也认为这就是事实，于是针对于这一件事的价值观就有了一个群体。倘若此时有一个人提出了质疑，那么他应该就会被这个群体辱骂攻击，直至不再发出自己的声音为止，于是这个群体就取得了所谓的「胜利」。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;有时候，提到一个随便的事实，就可以引出我们一系列奇怪的想法。理性会告诉我们，这些意象是前后不连贯，说不通的，但群体看不到这一点。它的能够变形的想象力在事件上增添东西，也会让它们混淆在一起。它无法将主观因素从客观因素中分离出来，它把在脑海中出现的意象看成是真实的，而其实，在大多数情况下，这些意象与所观察到的事实仅有非常遥远的关联。&lt;/strong&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种事情在当今的饭圈，性别对立之间屡见不鲜。&lt;/p&gt;
&lt;p&gt;不过作为一个个体，想要在社会中立足，单打独斗是不太现实的。这时候就必须想要寻找一个集体，集体可以给予个人帮助以及安全感，但与此同时，代价就是个人会放弃一下自己的个性来迎合整个集体的个性。&lt;/p&gt;
&lt;p&gt;书中还提到了教育，认为当今的教育就是教育人们如何「背诵教材」，认为多背书就可以提高智力，殊不知这也是在扼杀人们的判断力、创造力以及独立思考的能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“等造就好了的人从学校里出来时，通常，他已经是一个不可救药的人了。他规规矩矩，结婚成家，满足于在圈子里混，而且总是在同一圈子里混，萎缩在他小小的办公室里。他规规矩矩地完成工作，仅限于此。这就是平均的回报。可以肯定的是，收支并不平衡。”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近也报道了一些机构以及学校针对一些文学作品的封禁，不再让学生们读这类读物，或许是想孩子们更加专心的背诵教材好好考大学，或许是让孩子从小只记得红色的好，还是那些人深谙群体的统治之道，扼杀独立思考的能力，「驭民先愚民」。&lt;/p&gt;
&lt;p&gt;人性真的本善吗？这个问题在看这本书之前我就在想，大众所谓善的标准就是「谦逊」「温和」，反过来恶就是「暴力」「狂妄自大」。可我在看一些动漫的时候，为什么喜欢看一些打斗的场面，爱看「暴力美学」，爱看主角的「狂妄」，而且大部分人也都爱看这些，并且把这些叫做「热血」。这是作为一个高级动物而言，意识深处尚存着一些动物的野性，还是被社会教化成一个「三好学生」，但是由于猎奇心理在作祟，对现在一成不变的生活一种反抗，我也弄不明白……&lt;/p&gt;
&lt;p&gt;看完这本书之后，我更加怀疑这个问题。例如当个人加入群体之后，会挣脱社会以及法律的束缚，暴露动物的本性，暴力而且野蛮。所以大概就是善恶并存或者是两者都不存在。要看个人所处的环境，就拿如今来说，父母从小的管教，法律的约束，这些因素是在促使人们向善的。但是当在一个乱世当中时，当一切「为了生存不择手段」时，生存的本能便就偏向了恶。&lt;/p&gt;
&lt;p&gt;作者还提到，群体还会通过「断言」「重复」「传染」这三种方式增强它施加给你精神信仰，让你不知不觉中对此深信不疑，甚至把其他不认同这种观点的人视作敌人。&lt;/p&gt;
&lt;p&gt;但是作者在论述他的那些观点时，何尝不也是在通过这三种方式论述呢。&lt;/p&gt;
&lt;p&gt;这本书成书于法国大革命时期，距离如今已然过去一百多年的时间，所以肯定存在一些时代的局限性，有一些论述看看就好，要有独立思考的能力，同时作者也在强调这一点。时时刻刻保持清醒的认知，不要被群体带动自己的情绪，变成一个偏激狭隘的人。&lt;/p&gt;
&lt;p&gt;当自己觉得自己不是「乌合之众」时，那么自己恰恰就是「乌合之众」。&lt;/p&gt;
&lt;p&gt;我们都摆脱不了是「乌合之众」，那么就做一个清醒的「乌合之众」。&lt;/p&gt;</description><guid isPermaLink="false">wu-he-zhi-zhong</guid><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate></item><item><title>国庆长假回家当小孩儿</title><link>https://zorox.me/post/2022/guo-qing-hui-jia.html</link><description>&lt;p&gt;今天国庆节回老家去了，还记得上一次国庆节回家还是在大一的时候，那时候一个人去大学报道，在郑州陇海站被小偷把整个钱包都偷走了，里边放着一两千的现金、银行卡以及身份证，没办法只好等国庆回家办一张新的身份证。因为这件事也让我长了不少记性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要在钱包带太多现金，平常只用带够可以应急用的就够了&lt;/li&gt;
&lt;li&gt;在人多嘈杂的环境下，要时刻注意自己的东西&lt;/li&gt;
&lt;li&gt;农历七月十五这一天，最好就在家呆着别乱跑，因为这一天是我们家的「倒霉日」（我爸定的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实本来是打算骑着山地车回去的，为此也准备了回去需要的东西，奈何天不如人愿，看着天气预报里连着几天的下雨天气还是打了退堂鼓，心里还想着下雨还骑车回去那不是纯纯的傻帽吗，于是就买了张高铁票打算做高铁回家。之前几次回家都是坐的拼车回家，因为可以直接给送到家门口，可以省下路途周转的功夫，但是人家只管接送郑州三环以内的，我现在住的远，也不想坐地铁去三环内，想想还是算了。&lt;/p&gt;
&lt;p&gt;出发这天在郑州已经下了好几场雨了，所以气温比较温和湿润，虽然看着天气预报说是要降温，也象征性的带了一件卫衣，以为这一件就差不多可以了。谁想着刚回来这一天老家比郑州高好几度，在外边站着都一直冒汗，他妈的第二天温度骤降十五度，给人都要冻傻了都，于是便问我弟弟要了一件厚一点的外套穿。现在他很多衣服在很久以前都是我的，哈哈哈因为我弟弟很多衣服都是我穿不上淘汰下来的，我妈还说为此省了不少钱呢，笑死我了。&lt;/p&gt;
&lt;p&gt;我弟弟，07年的小伙子，与我相差11岁11天，今年已经读初三了。过年见他的时候，感觉还是个小矮子，这次回来都快一米七了，而且说话的嗓音也变的很粗很浑厚，再也不是那种一听他说话就知道他是个小孩的那种稚气未脱的感觉，一下子感觉他好像长大了，我也不能再把他当小孩了。他学习挺好的，至少要比他这个哥要强多了，这就是所谓了「老二必定比老大强」吗？&lt;/p&gt;
&lt;p&gt;虽说考试成绩挺好，但是有个毛病，就是字写的太差，不仔细看都看不懂，我爸也经常拿这个说教他，「字写成这样成绩能上去吗」、「字写的跟狗之叉一样」、「跟你哥学学，你哥的字可写的比你工整多了」（实话，没毛病）等等。为此我跟他说了我当初是怎么怎么坚持练字的，他说他知道，他在一个补习班的时候，听他班主任的说过了。这个老师就是我初二的班主任，在其他同学都放弃练字的时候我仍然在坚持练习，以至于她对我刮目相看。可是后来啊，唉……&lt;/p&gt;
&lt;p&gt;说来也奇怪，我没怎么在他身上看见叛逆的影子，或许是我不经常在家，或许是我那时候太叛逆以至于我以为大家都那样，真的要比我那时候懂事多了，真好。不过不知道是不是因为在我面前不敢放肆，懂得都懂，血脉压制。&lt;/p&gt;
&lt;p&gt;我还把我的卡西欧G-Shock头文字D周杰伦同款小方块手表送给我弟弟了，毕竟读中三了，有个手表对时间的管理也会好点。而且他也快生日了，我也想过这就当是送给他的生日礼物了，虽然说不是新的，不过这都是家人们，怎么会介意呢，哈哈哈，而且也是真的家人们。&lt;/p&gt;
&lt;p&gt;这次回家也见到了爸妈，他俩还是老样子，我爸来来回回唠叨那几句话，「要注意身体，多休息，少熬夜」，「学着自己做饭，别经常点外卖」，「多锻炼，没事出去走走，别没事一直待屋里」等等，听的耳朵都要出茧子了。我妈则是老跟我唠他干啥了干啥了，衣服收拾的多好，做的被子多厚实多暖和等等，还说着「看你妈厉害吧，看看你爸，懒的跟呢啥一样」，哈哈哈可爱。这次回去我也不知道怎么回事，似乎是放的太开了，说话老带个「求」字，就是那个「去求」的「求」，我们那叫「说话带把儿」，于是便经常有了如下对话：&lt;/p&gt;
&lt;p&gt;「你要是再不好好说话，信不信我揍你」&lt;/p&gt;
&lt;p&gt;「你说话不是也老骂人吗？，你咋还好意思说我」&lt;/p&gt;
&lt;p&gt;「那咱俩就谁也别说脏话了，害，这娃」&lt;/p&gt;
&lt;p&gt;「……」&lt;/p&gt;
&lt;p&gt;我妈是一个典型的农村妇女，家里生活上的事情都是我妈一手操劳的，性格也比较大大咧咧，有些事情也是我妈主事。因为很多东西都不舍得扔，导致家里有些地方堆满了旧的衣物啥的，每次回去都要跟她说把这些不用的东西都扔了得了，她就嚷嚷我，让我一边去……。我爸也说不过我妈，不过我现在发现我爸已经被我妈带的同化了，这就导致我奶现在对他俩意见都挺大的。&lt;/p&gt;
&lt;p&gt;「让你爸把东西收拾收拾，就是不收拾，犟的跟驴一样，你回来了可跟你爸说说」&lt;/p&gt;
&lt;p&gt;「跟他说了，我哪能说的动，你比他还大一级都说不动，何况我这还比他小一级」&lt;/p&gt;
&lt;p&gt;「真服了这人，***」&lt;/p&gt;
&lt;p&gt;回家待了三天，看着天气老是下雨，再加上感觉再待下去就该要烦我了，我就提前回郑州了。&lt;/p&gt;
&lt;p&gt;这次回来感触最深的就是晚上一家人围着一个桌子吃晚饭的时候，说说笑笑，放下了所有在外饭局上的心思，就好像一个年龄稍大的小孩，放松且自然。&lt;/p&gt;
&lt;p&gt;我平常不怎么爱回家，或许是野惯了，或许是回家有压力，又或许是嫌麻烦，理由可以找很多很多。&lt;/p&gt;
&lt;p&gt;不过这次回去感觉还挺好的，或许是掌握了一个技能。&lt;/p&gt;
&lt;p&gt;一个耳朵进，一个耳朵出。&lt;/p&gt;</description><guid isPermaLink="false">guo-qing-hui-jia</guid><pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate></item><item><title>上岸第一剑，先斩意中人</title><link>https://zorox.me/post/2022/ren-sheng.html</link><description>&lt;p&gt;今天看完了路遥的&lt;em&gt;《人生》&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;同情剧中的巧珍，那么的爱着高加林&lt;/p&gt;
&lt;p&gt;单纯，勇敢，洒脱……&lt;/p&gt;
&lt;p&gt;可是即使是这样，结果却还是被动的那一个&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;反观加林&lt;/p&gt;
&lt;p&gt;虽然有着身为年轻人该有的事业心野心抱负心&lt;/p&gt;
&lt;p&gt;虽然通过自己的努力距离自己的目标越来越近&lt;/p&gt;
&lt;p&gt;却也滋生了本不该有的傲慢&lt;/p&gt;
&lt;p&gt;是啊，是要远走高飞，是要去那旷阔天地大有作为&lt;/p&gt;
&lt;p&gt;觉得巧珍不识字，农村妇女，两个人不合适&lt;/p&gt;
&lt;p&gt;自己应该是要和黄亚萍这样的知识分子结合在一起的  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;于是便选择了黄亚萍&lt;/p&gt;
&lt;p&gt;可是他又哪能想的到，自己因为走捷径而被人揭发&lt;/p&gt;
&lt;p&gt;被赶回到生他养他的那个农村，那个他一直想逃离的农村&lt;/p&gt;
&lt;p&gt;此刻他后悔了，后悔自己做的决定&lt;/p&gt;
&lt;p&gt;正如他自己所说的那样，本来得到的是一块金子，却被他当作土疙瘩给扔掉了&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;这不免就让我想到了现实生活，有很多相恋的人，为了实现自己心中的目标，毅然决然的选择结束自己的感情&lt;/p&gt;
&lt;p&gt;所以就又回到那个议题，爱情和面包哪个重要。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;本来上面写的那些是在日记里写着的，仅仅是写一下读完这本书的感觉，写到 &lt;strong&gt;爱情和面包哪个重要&lt;/strong&gt; 这句话的时候，已经很困了，索性就直接睡觉了得了，虽然也没写完。&lt;/p&gt;
&lt;p&gt;然而过了几天，又想到了这本书，看着之前写的这段话，回忆一下刚看完的感觉，很难受很惋惜很愤恨。高加林他怎么这样，黄亚萍有那么好吗？？以至于我写的日记字里行间也都带着情绪。&lt;/p&gt;
&lt;p&gt;这本书算是路遥的成名作，很多名人也都推荐过。所以我就在想，我只从这本书里看到这些年轻人的爱情，是不是有点狭隘了。一本爱情小说而已，何以值得这么多人称赞。好吧，我承认这里是有偏见，可能我认为爱情都太俗了。&lt;/p&gt;
&lt;p&gt;于是我从上帝的视角挣脱出来，进入书中的角色，想象自己是高加林，想象自己从小就在农村，想象自己读过书，不同于农村其他没读过书的孩子，有那种读书人的傲气，自己和别人不一样。&lt;/p&gt;
&lt;p&gt;其实也不用想象，我们很多地方都差不多，我也是土生土长的农村人，吃过种庄稼的苦，也曾经觉得自己读的书比别人多而觉得自己是所谓的文化人，懂得比别人多，也认为自己前途无量，应该是要搞一番大事业。&lt;/p&gt;
&lt;p&gt;好像书中的人就是我，可是，我没有走后门的能力，现在依旧在破旧的生活中沉沦。&lt;/p&gt;
&lt;p&gt;当我处在他的人生时，我会做什么选择，会不会因为自己迫切的野心而放弃自己珍贵的东西，就如书中放弃爱情一样。现在也只能说：不清楚，不知道。&lt;/p&gt;
&lt;p&gt;现在再看日记里的随手写的一个疑问：爱情和面包哪个重要似乎是不正确的，应该是爱情和事业哪个重要。&lt;/p&gt;
&lt;p&gt;那么爱情和事业哪个重要？鱼和熊掌不可兼得，选择必然伴随着代价，但是我想大多数人的选择应该和高加林的一样，选择后者吧，现实就是这样。&lt;/p&gt;
&lt;p&gt;「上岸第一剑，先斩意中人」，这些不就是我们现实生活中经常发生的事情。&lt;/p&gt;
&lt;p&gt;书中的扉页这样写道：“&lt;strong&gt;人生的道路虽然漫长，但紧要处常常只有几步，特别是当人年轻的时候。没有一个人的生活道路是笔直的、没有岔道的。有些岔道口，譬如政治上的岔道口，事业上的岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一个时期，也可以影响一生。&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;好像是在说人生处处都是选择，到处都是岔路口，不要做错误的选择。&lt;/p&gt;
&lt;p&gt;可是现在我们看完整个故事是可以下结论说高加林的选择是错误的，但我们自己的人生又怎能知道那未来，又怎能确定当下的选择是正确与否。&lt;/p&gt;
&lt;p&gt;或许这就是人生吧。&lt;/p&gt;
&lt;p&gt;毕竟，我也不懂人生，我也才二十几岁，我也还年轻。&lt;/p&gt;</description><guid isPermaLink="false">ren-sheng</guid><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate></item><item><title>当潮流爱新鲜，当旁人爱标签</title><link>https://zorox.me/post/2022/wu-tiao-jian.html</link><description>&lt;p&gt;时隔多年，又再一次听到了Eason的歌，回忆在脑海中翻滚。犹记得高中的时候，手机里放的最多的就是Eason的歌，这些俨然已经成为我青春的一部分。&lt;/p&gt;
&lt;p&gt;那时候青春懵懂，不是很懂感情，好不容易遇到喜欢的女孩，终于鼓起勇气向对方表白，收到的却是干脆的拒绝，两个人也因此不再说话，即使说话也是恶意中伤的话。&lt;/p&gt;
&lt;p&gt;被拒绝的感觉不好受，本来这个年纪就是矫情的年纪。&lt;/p&gt;
&lt;p&gt;对于世上的不管是音乐亦或是电影，只要感到特别喜欢，那么一定是与自己的经历、思想、亦或是深藏的感情不谋而合，产生强烈的共振。&lt;/p&gt;
&lt;p&gt;而Eason的歌就是这样，嗓音沙哑且稳定，徐徐道来自己的故事，温柔且坚定。&lt;/p&gt;
&lt;p&gt;有人说他的歌丧，可真的伤心难过时去听他的歌，能感受到的却是温暖和慰藉。&lt;/p&gt;
&lt;p&gt;仔细想想我也好久没有听过Eason的歌了，可能是感情生活过的还算如意，不需要像当时一样寻求慰藉。但就在当时来说，Eason就真像人们称呼的那样，像医生一样治疗人们内心的感情创伤。&lt;/p&gt;
&lt;p&gt;附上这首时隔多日唤起回忆的歌——&lt;strong&gt;&lt;em&gt;《无条件》&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;当潮流爱新鲜，当旁人爱标签&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;幸得伴着你我，是窝心的自然&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当闲言再尖酸，给他妒忌多点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因世上的至爱，是不计较条件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><guid isPermaLink="false">wu-tiao-jian</guid><pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate></item><item><title>科学有效的上网方法</title><link>https://zorox.me/post/2021/ru-he-fq.html</link><description>&lt;p&gt;看这这个挺高大上的标题，好像就像是标题党一样，其实真正的标题用正常人的话来说，就是如何科学的上网，只不过生活在大陆这个环境下，已经习惯了用各种隐晦的词来描述某些东西。算了，标题党就标题党吧。&lt;/p&gt;
&lt;p&gt;写这篇的主要原因也是因为最近腾讯云把我的一个香港服务器给封禁了，理由也是意料之中的「存在通过技术手段使其成为跨境访问节点等行为」，刚开始还以为是先发出警告，等我连接服务器的时候发现直接是把服务器给封掉了，连22端口都没得用。幸亏部署的服务都是静态方式存储的，而且大多数还都有备份，这要是没有备份的话，真的要气死人了。&lt;/p&gt;
&lt;p&gt;没办法只好重新搞一台服务器了，不过这次选用的国外的服务器，服务器拿到手就直接通过脚本部署了一套SSR，刚用了几个小时就被Q了，切换IP同样操作之后还是没过多久就又不行了，于是尝试更换方案，经过了解尝试使用V2Ray+websocket+tls+web的方式来构建服务。&lt;/p&gt;
&lt;p&gt;V2Ray+websocket+tls+web是目前最稳定的翻Q技术之一，即使在敏感时期也稳如泰山。和SSR的流量混淆不同，V2Ray+ws+tls用真正的https流量FQ，没有必要做任何混淆。在长城看来，流量和不计其数的https流量没有任何区别。但是如果GFW尝试主动嗅探的话，发现流量的目的地没有真正的网站，从而被识破然后被Q。所以要在这个服务外面加一个真正的网站做掩护，从而假装是访问真正的网站。&lt;/p&gt;
&lt;h2&gt;Cloudflare配置DNS&lt;/h2&gt;
&lt;p&gt;这次部署过程中，使用的是Cloudflare作为DNS服务器，Cloudflare是世界上最大的CDN提供商，全球半数的网站都在使用Cloudflare。使用不用担心隐私泄露或钓鱼风险，而且也可以提供免费的CDN服务，只不过对于国内来说，访问速度可能会慢一点。&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/jFu3MfCB.png" src="https://static.19961002.xyz/img/2022/jFu3MfCB.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS类型为A类型&lt;/li&gt;
&lt;li&gt;名称为要解析的域名地址，可以顶级，也可以是二级域名&lt;/li&gt;
&lt;li&gt;内容就是要解析的IP地址&lt;/li&gt;
&lt;li&gt;代理状态为「仅限DNS」，注意小云朵是灰色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置完成之后可以使用 &lt;strong&gt;ping&lt;/strong&gt;命令测试是否可以ping通，如果可以，那就说明配置没问题。&lt;/p&gt;
&lt;h2&gt;V2Ray安装和配置&lt;/h2&gt;
&lt;p&gt;网上已经有很多一键安装脚本，这里选用的是 &lt;a href="https://github.com/v2fly/fhs-install-v2ray/blob/master/README.zh-Hans-CN.md"&gt;https://github.com/v2fly/fhs-install-v2ray&lt;/a&gt;，此脚本需要在root用户下运行，并且会安装如下文件：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ctl&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;geoip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;geosite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;
&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v2ray&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此脚本会配置自动运行脚本。自动运行脚本会在系统重启之后，自动运行 V2Ray。目前自动运行脚本只支持带有 Systemd 的系统，以及 Debian / Ubuntu 全系列。&lt;/p&gt;
&lt;p&gt;其中路径&lt;code&gt;/usr/local/etc/v2ray/config.json&lt;/code&gt;就是配置文件的路径，安装完成之后只用修改这个文件即可。&lt;/p&gt;
&lt;p&gt;关于V2Ray的配置网上已经有很多，我们只需要下载一个，其中需要修改的地方改成我们自己的即可。可以参考我的配置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;inbound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vmess&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;clients&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;◆◆◆◆◆◆◆◆◆◆◆◆&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;afterId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;streamSettings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ws&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;wsSettings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/★★★★★★★★★★★★&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;outbound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;freedom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;geoip:provate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blocked&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个配置文件中，需要将标记的信息换成自己的即可：&lt;/p&gt;
&lt;p&gt;"◆◆◆◆◆◆◆◆◆◆◆◆"：uuid，自己生成或者通过在线网站生成，例如：&lt;code&gt;63c0042a-4a85-4d03-a488-3ba383142461&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;"★★★★★★★★★★★★"：这个地方填写的则是一个随机字符串，越没有规律越好，越乱越好，可以在键盘上胡乱打一串或者程序生成。其实这个字符串就是websocket路径，在配置客户端的时候需要用到。&lt;/p&gt;
&lt;h2&gt;Nginx配置反代&lt;/h2&gt;
&lt;p&gt;因为上面已经配置了DNS的解析服务，而且也不适合直接用IP，所以这时候就需要用Nginx来代理websocket，配置文件内容如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="err"&gt;1:&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;●●●●●●●●●●●●&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt; &lt;span class="err"&gt;reuseport&lt;/span&gt; &lt;span class="err"&gt;fastopen=10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^(.*)&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;($request_method&lt;/span&gt;  &lt;span class="err"&gt;!~&lt;/span&gt; &lt;span class="err"&gt;^(POST|GET)$)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;return&lt;/span&gt;  &lt;span class="err"&gt;501&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;autoindex&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;server_tokens&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="err"&gt;2:&lt;/span&gt;
    &lt;span class="err"&gt;ssl_certificate&lt;/span&gt; &lt;span class="err"&gt;/etc/letsencrypt/live/●●●●●●●●●●●●/fullchain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="err"&gt;3:&lt;/span&gt;
    &lt;span class="err"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="err"&gt;/etc/letsencrypt/live/●●●●●●●●●●●●/privkey.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="err"&gt;4:&lt;/span&gt;
    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/★★★★★★★★★★★★&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8964&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_redirect&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_http_version&lt;/span&gt; &lt;span class="err"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;Upgrade&lt;/span&gt; &lt;span class="err"&gt;$http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;Connection&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;Host&lt;/span&gt; &lt;span class="err"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="err"&gt;sendfile&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;tcp_nopush&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;tcp_nodelay&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;keepalive_requests&lt;/span&gt; &lt;span class="err"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="err"&gt;2h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_buffering&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;listen&lt;/span&gt; &lt;span class="nt"&gt;443&lt;/span&gt; &lt;span class="nt"&gt;ssl&lt;/span&gt; &lt;span class="nt"&gt;reuseport&lt;/span&gt; &lt;span class="nt"&gt;fastopen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;server_name&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;server_name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;charset&lt;/span&gt; &lt;span class="nt"&gt;utf-8&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;sendfile&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;tcp_nopush&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;tcp_nodelay&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;keepalive_requests&lt;/span&gt; &lt;span class="nt"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="nt"&gt;2h&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;ssl_protocols&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="nt"&gt;TLS13-CHACHA20-POLY1305-SHA256&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;TLS13-AES-128-GCM-SHA256&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;TLS13-AES-256-GCM-SHA384&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;ECDHE-ECDSA-AES128-GCM-SHA256&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;ECDHE-RSA-AES128-GCM-SHA256&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;ECDHE-ECDSA-AES256-GCM-SHA384&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;ECDHE-RSA-AES256-GCM-SHA384&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;ECDHE-ECDSA-CHACHA20-POLY1305&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;ECDHE-RSA-CHACHA20-POLY1305&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;DHE-RSA-AES128-GCM-SHA256&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;DHE-RSA-AES256-GCM-SHA384&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_ecdh_curve&lt;/span&gt; &lt;span class="nt"&gt;secp384r1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="nt"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;SSL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;60m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="nt"&gt;1d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_session_tickets&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_stapling&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;resolver&lt;/span&gt; &lt;span class="nt"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt; &lt;span class="nt"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;4&lt;/span&gt; &lt;span class="nt"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;300s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;resolver_timeout&lt;/span&gt; &lt;span class="nt"&gt;10s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;request_method&lt;/span&gt;  &lt;span class="o"&gt;!~&lt;/span&gt; &lt;span class="o"&gt;^(&lt;/span&gt;&lt;span class="nt"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;)$)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;501&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;add_header&lt;/span&gt; &lt;span class="nt"&gt;X-Frame-Options&lt;/span&gt; &lt;span class="nt"&gt;DENY&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;add_header&lt;/span&gt; &lt;span class="nt"&gt;X-XSS-Protection&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1; mode=block&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;add_header&lt;/span&gt; &lt;span class="nt"&gt;X-Content-Type-Options&lt;/span&gt; &lt;span class="nt"&gt;nosniff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;add_header&lt;/span&gt; &lt;span class="nt"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="nt"&gt;max-age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;31536000&lt;/span&gt; &lt;span class="nt"&gt;always&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;autoindex&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;server_tokens&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;index&lt;/span&gt; &lt;span class="nt"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;html&lt;/span&gt; &lt;span class="nt"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;htm&lt;/span&gt;  &lt;span class="nt"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;php&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;.*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="nt"&gt;js&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;jpg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;JPG&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;jpeg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;JPEG&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;css&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;bmp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;gif&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;GIF&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;png&lt;/span&gt;&lt;span class="o"&gt;)$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;access_log&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;index&lt;/span&gt; &lt;span class="err"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看上去很长，实际上只有四处需要填写，配置文件里用#1，#2，#3，#4标出了位置，把标符号的地方换成你自己的信息。&lt;/p&gt;
&lt;p&gt;●●●●●●●●●●●●：标注“●”的地方填写域名，&lt;strong&gt;注意这里的域名带www&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;★★★★★★★★★★★★：标注“★”的地方填写一个随机字符串，这个随机字符串必须和V2Ray配置中的一样，不然无法工作。注意不要删掉前面的斜杠。&lt;/p&gt;
&lt;p&gt;最后，把Nginx的配置文件另存为default.conf（注意扩展名就是.conf），放在&lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt;下。&lt;/p&gt;
&lt;h2&gt;配置SSL证书&lt;/h2&gt;
&lt;p&gt;为了用真正的https流量翻墙，网站就必须有合法的SSL证书。可以用自动化工具Certbot申请证书，只要把以下命令复制到命令窗口，依次执行即可。&lt;/p&gt;
&lt;p&gt;这里说的“证书”，实际指的是“数字证书”。当然申请完全是免费的，申请时需要邮箱地址。如有必要，可以使用匿名邮箱。&lt;/p&gt;
&lt;h3&gt;安装certbot&lt;/h3&gt;
&lt;p&gt;由于服务器系统自带的Python环境是v3.7，但是没有安装pip，所以首先安装pip工具。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt install python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装好pip之后即可安装certbot&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install certbot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成证书&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;certbot certonly --standalone --agree-tos -n -d www.●●●●●●●●●●●● -d ●●●●●●●●●●●● -m ●●●●●●●●●●●●@●●●●●●●●●●●●
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个-d加一个带www的域名，第二个-d加一个不带www的域名，-m后面加你的电子邮箱。注意前后要带空格。&lt;/p&gt;
&lt;p&gt;运行这条命令后，如果显示：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;IMPORTANT&lt;/span&gt; &lt;span class="nl"&gt;NOTES:&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Congratulations&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;certificate&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="nl"&gt;at:&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;letsencrypt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;live&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hrw1rdzqa7c5a8u3ibkn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fullchain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;
  &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="nl"&gt;at:&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;letsencrypt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;live&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hrw1rdzqa7c5a8u3ibkn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;privkey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;
  &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;cert&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="mh"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;04.&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;obtain&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;tweaked&lt;/span&gt;
  &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;certificate&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simply&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;certbot&lt;/span&gt;
  &lt;span class="n"&gt;again&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;interactively&lt;/span&gt; &lt;span class="n"&gt;renew&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;certbot renew&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;Certbot&lt;/span&gt;
  &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;letsencrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="n"&gt;secure&lt;/span&gt; &lt;span class="n"&gt;backup&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt;
  &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="n"&gt;obtained&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Certbot&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt;
  &lt;span class="n"&gt;making&lt;/span&gt; &lt;span class="n"&gt;regular&lt;/span&gt; &lt;span class="n"&gt;backups&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ideal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;Certbot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt; &lt;span class="n"&gt;consider&lt;/span&gt; &lt;span class="n"&gt;supporting&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="nl"&gt;by:&lt;/span&gt;

  &lt;span class="n"&gt;Donating&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;ISRG&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;Let&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nl"&gt;Encrypt:&lt;/span&gt;  &lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="c1"&gt;//letsencrypt.org/donate&lt;/span&gt;
  &lt;span class="n"&gt;Donating&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nl"&gt;EFF:&lt;/span&gt;                    &lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="c1"&gt;//eff.org&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;表示证书生成成功。&lt;/p&gt;
&lt;p&gt;注意：在生成证书的时候容易出现问题，就比如我在生成证书的时候就出现如下错误：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; -g -fdebug-prefix-map&lt;span class="o"&gt;=&lt;/span&gt;/build/python2.7-PPrPZj/python2.7-2.7.15&lt;span class="o"&gt;=&lt;/span&gt;. -fstack-protector-strong -Wformat -Werror&lt;span class="o"&gt;=&lt;/span&gt;format-security -fPIC -DUSE__THREAD -DHAVE_SYNC_SYNCHRONIZE -I/usr/include/ffi -I/usr/include/libffi -I/usr/include/python2.7 -c c/_cffi_backend.c -o build/temp.linux-x86_64-2.7/c/_cffi_backend.o
  c/_cffi_backend.c:15:10: fatal error: ffi.h: No such file or directory
   &lt;span class="c1"&gt;#include &amp;lt;ffi.h&amp;gt;&lt;/span&gt;
            ^~~~~~~
  compilation terminated.
  error: &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x86_64-linux-gnu-gcc&amp;#39;&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法是安装相关依赖即可。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt install libffi-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的因为这个问题导致的&lt;code&gt;cryptography&lt;/code&gt;和&lt;code&gt;pyopenssl&lt;/code&gt;版本问题，也可以通过&lt;strong&gt;升级安装包&lt;/strong&gt;解决。&lt;/p&gt;
&lt;p&gt;另外通过这种方式生成的证书时限只有三个月，所以我们通过定时任务，让他自从申请证书，从而达到证书的 &lt;strong&gt;自动续命&lt;/strong&gt; 。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0 0 1 */2 * service nginx stop; certbot renew; service nginx start;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; crontab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;启动服务&lt;/h2&gt;
&lt;p&gt;测试V2Ray配置是否正常&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/local/bin/v2ray -test -config&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/etc/v2ray/config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果显示：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;V2Ray&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="nv"&gt;x&lt;/span&gt;.&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;V2Fly&lt;/span&gt;, &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;community&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;driven&lt;/span&gt; &lt;span class="nv"&gt;edition&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;V2Ray&lt;/span&gt;.&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="nv"&gt;unified&lt;/span&gt; &lt;span class="nv"&gt;platform&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;anti&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;censorship&lt;/span&gt;.
&lt;span class="nv"&gt;Configuration&lt;/span&gt; &lt;span class="nv"&gt;OK&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试nginx配置是否正常&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果显示：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="sr"&gt;/etc/nginx/&lt;/span&gt;&lt;span class="n"&gt;ngin短网址nf&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;
&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="sr"&gt;/etc/nginx/&lt;/span&gt;&lt;span class="n"&gt;ngin短网址nf&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;successful&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明配置没有问题。&lt;/p&gt;
&lt;p&gt;测试V2Ray和Nginx配置正常之后即可启动服务了。启动服务通过&lt;code&gt;service&lt;/code&gt;命令启动&lt;/p&gt;
&lt;p&gt;启动V2Ray：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;service v2ray start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动Nginx&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;service nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置完成后，可以在浏览器里输入网址，如果显示Nginx的欢迎页面，就说明网址配置成功了！
接下来要做的是上传一个网页模板，这样别人访问你的服务器就会看到一个真的网站。&lt;/p&gt;
&lt;p&gt;在网上找一些静态网页模版，放在目录&lt;code&gt;/usr/share/nginx/html/&lt;/code&gt;下即可，最好是找一些全英文的网站，存在中文的话可能会增加一些被墙的概率。&lt;/p&gt;
&lt;h2&gt;客户端配置&lt;/h2&gt;
&lt;p&gt;这里使用的客户端是著名的代理软件Shadowsockets（小火箭），这是一款iOS生态下全平台通用的一款软件，配置也相对简单。&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/XUEexvP4.png" src="https://static.19961002.xyz/img/2022/XUEexvP4.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;点【服务器】按钮，选择【添加VMess】服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址：域名地址，当然也可以IP地址&lt;/li&gt;
&lt;li&gt;端口：443&lt;/li&gt;
&lt;li&gt;UUID：就是上面说的V2Ray配置文件里的UUID&lt;/li&gt;
&lt;li&gt;额外ID：0，最新的V2Ray版本已经强制为0，至于原因可以自行Google&lt;/li&gt;
&lt;li&gt;算法：随便选。&lt;/li&gt;
&lt;li&gt;传输方式：选WebSocket；Host：域名地址；路径：即前面的随机字符串，注意前面必须要加上斜杠“/”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/image-20220720124353424.png" src="https://static.19961002.xyz/img/2022/image-20220720124353424.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;别名：随便填。&lt;/li&gt;
&lt;li&gt;TLS：打开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到这里基本上就算完成了，当然还有一些其他优化项，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDN隐藏域名IP&lt;/li&gt;
&lt;li&gt;BBR加速（debian10以上自动开启）&lt;/li&gt;
&lt;li&gt;配置防火墙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想要了解的可以自行Google，我太懒了，也没有做这些配置，就不一一赘述了，逃。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a href="https://pincong.rocks/article/15493"&gt;https://pincong.rocks/article/15493&lt;/a&gt;&lt;/p&gt;</description><guid isPermaLink="false">ru-he-fq</guid><pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate></item><item><title>你真没意思啊</title><link>https://zorox.me/post/2022/What-is-fun.html</link><description>&lt;p&gt;无聊之中想到自己的生活怎么这么无趣，要是变得有趣一点就好了。于是就突然想到「有趣」这个词，想了想还觉得挺有意思的，到底什么才算是有趣呢，我们会怎么评价一个人有趣呢？是网上那些人吗？那些有着奇思妙想的人，那些可乐搞笑的人，那些满腹经纶的人，还是那些勇敢自由的人呢。我们好像普遍喜欢称呼这些人就是有趣人的人，喜欢在网上关注这些人，还会时不时的评论一句：「我要是像你一样就好了」&lt;/p&gt;
&lt;p&gt;或许是普通人的生活太过规律平淡，三点一线已成为生活的主旋律，吃饭、工作、睡觉。娱乐活动也就那么几个，看剧打球打游戏。我们评价这些为无趣的生活。或许是我们对于习以为常的事情会感到厌倦，又或许是对于目前这操蛋的生活感到疲惫，我们开始抱怨，我们想要改变自己的生活，想要这平淡泛起波澜，想要挣脱这牢笼，想要自由。&lt;/p&gt;
&lt;p&gt;那些被称作有趣的人满足了我们对于自己该有生活的期望，让精神得以享受，我们喜欢这种感觉。是的，好像这种有趣的人对于我们来说是精神食粮，我们称呼一个人有趣，是因为他们拥有取悦我们的能力。&lt;/p&gt;
&lt;p&gt;可是还有一些人，他们喜欢打游戏看剧，我们会评价这些人为无趣的人，甚至还会时不时来上一句「你真没意思」，更有甚至「无趣」也终结了很多亲密关系。&lt;/p&gt;
&lt;p&gt;然而我们评价一个人怎么怎么样，不过是站在自我的角度来看的，就如同上面所说的那样，当这个人没有达到让自己快乐的点的时候，我们是不愿意同这种「没意思」的人打交道的。&lt;/p&gt;
&lt;p&gt;那么这些人真的是无趣的人吗，我无法进行评价，但是可以知道的是，他们沉浸在自己的小世界中，做着自己喜欢做的事来取悦自己，那么我想对于他们自己来说，自己还是「有趣」的。&lt;/p&gt;
&lt;p&gt;不知不觉写了这些，也不知道写的主题是啥，大聪明脑袋总是时不时的不聪明，不过刚好今天空闲，就动动手指把想的啥给记下来吧。&lt;/p&gt;
&lt;p&gt;权当就是胡说八道得了。&lt;/p&gt;</description><guid isPermaLink="false">What-is-fun</guid><pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate></item><item><title>理想主义下的web3</title><link>https://zorox.me/post/2022/web3.html</link><description>&lt;p&gt;前些日子没事了解到了web3，甚至还有很多人扬言要辍学然后all in web3，不知道他们为何如此疯狂，猜测他们可能为了实现财富自由而选择赌一把，或者是愿意义无反顾的投入到这个在目前看来还是理想主义的虚拟世界中。我想还是前者应该更多一点吧。&lt;/p&gt;
&lt;h2&gt;web2存在的问题&lt;/h2&gt;
&lt;p&gt;说到web3，那就不可避免的要谈论web2。在web2时代，人们活跃在诸如微博、知乎之类的大型平台上，将自己的想法发布在平台上，但是这条内容仍然不是归属个人所有，平台可以随意删除这条内容或者封禁自己的账号。&lt;/p&gt;
&lt;p&gt;平台垄断让言论自由似乎成了笑话。&lt;/p&gt;
&lt;p&gt;再比如通过支付宝或者微信转账，我们在手机里输入的金额，只不过是他们数据库里的一条记录，所有的交易都要通过支付宝公司的银行账户，此时支付宝决定着你的财产，当账号被冻结时，财产也随之被冻结。&lt;/p&gt;
&lt;p&gt;诸如此类的还有很多问题，如大数据收割、信息贩卖等。&lt;/p&gt;
&lt;p&gt;俗话说，压迫之下必有革命，web3就是在这个背景下衍生出来，用来对抗web2时代的这些巨头的垄断霸权，人们从那些巨头手里夺回自己所有物的完全控制权，不再受其控制。&lt;/p&gt;
&lt;h2&gt;web3该怎么定义&lt;/h2&gt;
&lt;p&gt;“&lt;strong&gt;去中心化&lt;/strong&gt;”是web3发展的灵魂，因其自由和平等的精神令人心驰神往。web3发展至今，仍然还是在非常早期的阶段，人们一听web3就觉得是区块链是炒币，是骗局。其实区块链只是web3的一种解决方式而已，至少目前来看是唯一的解决方式。至于虚拟币和web3的关系，那是因为区块链的每一个节点的搭建是需要发放激励代币的，人们通过将自己的电脑搭建成矿机之后，作为区块链中的一块，这条链会为这个用户发放激励代币，用来奖励该用户，不然人们凭什么要贡献自己的计算资源。&lt;/p&gt;
&lt;p&gt;区块链技术当中的智能合约，是Web3.0的一个基石，其宗旨是“&lt;strong&gt;code is law&lt;/strong&gt;”，代码即法律、代码即规定，一切规则被写进协议，一旦开启便不可篡改，代码开源、公开透明，接受所有人的检查，同时区块链节点分布式的协同共识，把信任的需求降到最低，人们不需要信任，只需要代码验证即可。&lt;/p&gt;
&lt;p&gt;所以用户发布的信息，也不再将收到平台的这种审查，因为这里没有一个中心化的管理者，或者说人人都是管理者，从而真正实现言论的自由和平等。&lt;/p&gt;
&lt;h2&gt;web3存在的一些问题&lt;/h2&gt;
&lt;p&gt;就先从虚拟币来看，目前有太多投机者和Ponzi以及赌狗，因为人人都可以发币，只要有打着web3的口号，就可以疯狂炒作自己的币种，致使那些想要暴富的人陷入FOMO的情绪当中而倾家荡产。&lt;/p&gt;
&lt;p&gt;其次就是自由必然带来混乱，比如可以在链上发布一些暴力和Pron的内容，然而这些内容是无法篡改和删除，这种混乱又该如何有一个良好的治理，仍然需要继续探索。还有既然是代码组成的世界，那么也必然就会有漏洞，所以就会被“科学家”通过漏洞盗走财产。&lt;/p&gt;
&lt;p&gt;然后就是与现实的割裂，链上的“无政府主义”始终是虚拟世界的，当肉身处于一个现实世界中，当有关机构一声令下，现实中的人又哪有抵抗的能力呢。&lt;/p&gt;
&lt;h2&gt;web3的未来会是什么样&lt;/h2&gt;
&lt;p&gt;首先web3无疑会是一场革命，至于最终会发展成什么样子，还是一团迷雾，需要人们不断探索。&lt;/p&gt;
&lt;p&gt;至少最近几年甚至十几年应该是没有什么大的进展，只是一种乌托邦式的理想主义。&lt;/p&gt;
&lt;p&gt;也许只有在经过混乱、贪婪、疯狂的情绪之后沉淀下来，才会有新的突破，也许那时候已经不是区块链，而是更先进的技术。&lt;/p&gt;
&lt;p&gt;web3的未来就交给时间来验证吧，毕竟时代的车轮总是在向前推进。&lt;/p&gt;
&lt;p&gt;There is no web3 in China.&lt;/p&gt;</description><guid isPermaLink="false">web3</guid><pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate></item><item><title>2021年终总结</title><link>https://zorox.me/post/2021/2021-summary.html</link><description>&lt;p&gt;马上2021就要结束了，所以又到了该年终总结的时候，坐在电脑桌前回想着这一年，依旧是浑浑噩噩，想不起来自己做过什么了不起的事，对社会更没做什么贡献，只记得生活和工作被乱七八糟的事情搞得一团糟。&lt;/p&gt;
&lt;p&gt;有很多想学的东西，到最后也不过是三分钟热度。&lt;/p&gt;
&lt;p&gt;有一直想去的地方，但是因为疫情和工作，到最后也只是窝在自己的出租屋里。&lt;/p&gt;
&lt;p&gt;想让自己生活变得有趣，可又拿自己一个人没意思为借口拒绝做了很多事，到最后还感慨生活真是无趣。&lt;/p&gt;
&lt;p&gt;经典emo开场，不过，其实仔细想一想，也并不是什么都没有收获的，至少收获了一年的时间呀。&lt;/p&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;画画。虽然到现在为止画的依然像是「狗支叉」，但我找到了一种新的解压方式：在哔哩哔哩看别人画画。看着简简单单的笔画线条，一笔一画的绘出一幅完整的漫画，感觉真的很美好。至于为什么看别人画漫画，特么的还不是因为自己不会：）&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;减肥，0.0。说来也挺好笑的，减肥这个词本来是从来不应该出现在我的词典里的，因为我向来都是怎么吃都吃不胖。奈何工作几年之后，经常吃饱就在那坐着，日积月累，最后挺着一大肚子。对于还是比较注意形象的我，开始走上了减肚子的道路。因为已经是秋冬的季节了，在外跑步的话害怕着凉，就选择在家锻炼。每天晚上跟着视频做20-30分钟的锻炼，晚餐只吃两个鸡蛋加一杯牛奶，就这样坚持了快两个月，体重由134→131。。。虽然体重没减多少，但是肚子是真的变小了，而且也可以摸到一点点腹肌了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;背单词。今年陆陆续续的背了将近有八百个左右的单词吧，后来测试的时候结果只记着一半，现在记着的估计更少了，别人都是过目不忘，而我偏偏是过目就忘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Coding。今年基本上没有学习什么新的技术，更多的是在继续深入已经学习的东西。&lt;/li&gt;
&lt;li&gt;人生中第一次在天安门前看升国旗，可是人太多了，凌晨三点去的时候也只能排在最后了。&lt;/li&gt;
&lt;li&gt;学会了用Figma，然而现在练的少，审美也还跟不上，还要多看多练。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Life&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;抽烟变少了。仔细想想，今年好像抽的烟也很少了，一天抽烟的次数基本上等同于自己蹲厕所的次数，如果忘拿了的话就不抽。但是，虽然说有时候不抽，但是身边不能没有，一没有就没有安全感，可买了又只是在桌子上放着，也不知道这是什么毛病。&lt;/li&gt;
&lt;li&gt;因为游戏无聊，所以不怎么玩游戏了，在steam上买了好几个单机游戏也都是登录了一下就没再玩了。想等以后两个人住了，买台PS游戏机，没事的时候两个人在家一起玩。&lt;/li&gt;
&lt;li&gt;用碎片化的时间开始阅读，特别是在地铁上的时候，通勤时间比较长，这应该是最适合消磨时间的方式了。&lt;/li&gt;
&lt;li&gt;本来期望的是今年可以好好自己做做饭，顺便学着做一些好吃的，可基本上是都点外卖了，做饭的次数屈指可数。&lt;/li&gt;
&lt;li&gt;吃饭这件事要全面发展，不能只吃一类东西，补充营养要全面均衡，不然就容易出毛病。比如口腔溃疡，这真的是很痛的领悟。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Event&lt;/h2&gt;
&lt;p&gt;印象里最深的事也就是720那场水灾吧。上一次经历水灾的时候在1998年，但是那时候还是个小屁孩，只记得跟在姐姐后面玩的时候，从水里蹦出来一个特别大的蛤蟆给我吓哭了，后来才知道那东西叫牛蛙。&lt;/p&gt;
&lt;p&gt;水灾之后因为交通瘫痪，骑了两个月的电动车去上班，单个路程大概需要一个多小时。也正是因为骑电动车，在路上也看到了很多不同于地铁里沉闷嘈杂的风景，所以在路上的感觉也还挺开心的。今天下班的时候，在路上会看到什么呢。&lt;/p&gt;
&lt;p&gt;地铁内是人挤人，大街上却是车挤车，一不留神就容易跟人怼上，还怼的不轻。&lt;/p&gt;
&lt;p&gt;刚跟人怼上的时候只感觉擦破了皮，去包扎一下就好了。然后就是好些天右胳膊提不起来重物，一使劲就劲疼。所以以后一定要好好做检查，可别落下什么隐疾了。&lt;/p&gt;
&lt;h2&gt;Best buy&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MacBook Air&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实很早就想拥有一台MacBook，奈何觉得太贵，花这么多钱买个这不值得，就在换电脑的时候买了台便宜点的Thinkpad。&lt;/p&gt;
&lt;p&gt;可能是因为经历过那次水灾之后，觉得人活着不容易，满足自己一些喜欢的东西没什么不好的，再加上新的芯片也很受大家的吹捧，所以就没忍住买了一台，结果就是真的香。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mi band 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;便宜不贵，和手机的兼容性也好。&lt;/p&gt;
&lt;p&gt;既可以记录睡眠、心率，又可以当跑步记录仪，充一次电可以用好多天。&lt;/p&gt;
&lt;p&gt;和昂贵的Apple Watch比真是太高的性价比了。&lt;/p&gt;
&lt;h2&gt;Books list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;三体&lt;/li&gt;
&lt;li&gt;亲密关系&lt;/li&gt;
&lt;li&gt;君主论&lt;/li&gt;
&lt;li&gt;爱的博弈&lt;/li&gt;
&lt;li&gt;绝叫&lt;/li&gt;
&lt;li&gt;狂人日记&lt;/li&gt;
&lt;li&gt;人间失格&lt;/li&gt;
&lt;li&gt;旅行之木&lt;/li&gt;
&lt;li&gt;人类简史&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多做饭，少点外卖，学着做些好吃的&lt;/li&gt;
&lt;li&gt;多一些有意义的爱好，让自己变得有趣&lt;/li&gt;
&lt;li&gt;学一些新技术或者新技能，技多不压身嘛&lt;/li&gt;
&lt;li&gt;拍照技术可以好点，看见别人随手一拍就是美景，真是羡慕&lt;/li&gt;
&lt;li&gt;疫情赶快过去吧，太特么烦了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The end, but new beginning.&lt;/p&gt;</description><guid isPermaLink="false">2021-summary</guid><pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate></item><item><title>迷之操作｜Django版静态Note生成器</title><link>https://zorox.me/post/2021/django-staticize.html</link><description>&lt;h2&gt;Powered by Django&lt;/h2&gt;
&lt;p&gt;正如这句话而言，目前这个网站是用Django来搭建的，至于当初为什么要选择Django，可能是因为它作为最流行的Web框架之一，开发迅速，以及自带的admin管理，可以迅速成型一个小型站点，YYDS。&lt;/p&gt;
&lt;h2&gt;Why change&lt;/h2&gt;
&lt;p&gt;最初这个网站是部署在HK的一个VPS上的，配置也是最低配置，解析是套了一层CF，所以造成国内访问非常慢。不过也可以忍受，就没在这上面折腾。按理说这种网站是用来写的，但我好像不务正业的折腾起来了页面，每换一种风格，用不了多久就觉得看着不舒服，于是又重新改了一套页面，于是又重复于此。&lt;/p&gt;
&lt;p&gt;前段时间正好赶上各大云厂商双11做活动，于是在结束的最后一天在良心云上薅了一台国内的VPS，配置要比之前的好一点，而且在国内速度跟之前比也是起飞一般的速度。&lt;/p&gt;
&lt;p&gt;在迁移项目的时候突然想到，现在的数据都是在当前主机上的，万一哪一天服务器忘记续费的话，等到期的时候数据岂不是就全丢了，要是把数据全上传到Git，这样不就不用担心了，而且切换服务器的时候，直接把项目拉下来直接就能跑，就像Page服务一样，那岂不是妙哉。&lt;/p&gt;
&lt;h2&gt;Ready to go&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;切换数据库从MySQL到SqlLite&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为SqlLite数据库是一个本地文件数据库，对于这种小型站点来说，十分便携方便，而且还可以直接上传到Git，所以就把数据全导入到这个数据库里边了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全站静态化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先统计网站的页面都有哪些，每个页面的路由都是什么，通过这些可以组织静态网页存放的目录结构，而且这些在之后的Nginx配置中也十分重要。&lt;/p&gt;
&lt;p&gt;比如我的文章路由为&lt;code&gt;https://itsso.cool/blog/django-staticize.html&lt;/code&gt;，那么文章 &lt;strong&gt;django-staticize.html&lt;/strong&gt;就应该放在静态文件根目录的 &lt;strong&gt;blog&lt;/strong&gt;目录下。&lt;/p&gt;
&lt;p&gt;由于平时写笔记喜欢在Typora上写完之后，在把文章源码复制到在线的编辑器内，再保存上传发布，同时笔记文件也会同时上传到Github以做备份。但是这样就会存在一个问题，假入想要修改其中某一篇内容的话，重复上面的步骤，实在繁琐，要是把笔记文件连同静态文件在项目部署的时候一起打包发布就好了。&lt;/p&gt;
&lt;p&gt;所以就开始改造模型，修改文章内容字段为&lt;strong&gt;FileField&lt;/strong&gt;，将笔记文件的相对路径保存到本地数据库内，每次写完就直接把文件上传。&lt;/p&gt;
&lt;p&gt;在构建静态文件的时候，数据来源从本地保存的文件来读取，这样一来既可以将笔记备份，同时在修改内容的时候也可以极大的缩减上传步骤。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给Typora配置专属图片上传服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在写笔记的时候难免会有一些图片，在上传这些图片的时候就会比较麻烦，因为Typora里边文件存放的只是一个当前主机的绝对路径，直接将笔记发布到线上的时候，图片会因为路径的问题加载不出来。此时就需要将图片保存到一个公网可以访问的一个图床内。&lt;/p&gt;
&lt;p&gt;好多人的做法是将自己的图片上传到微博、知乎、csdn等一些知名网站上，然后再将这些图片链接插入到自己的笔记内。这样做虽然是很方便快速，但是也会存在一些问题，就比如微博在某一天，突然给自己的链接加上了防盗链，导致了所有的图片在自己以外的网站不能继续使用。&lt;/p&gt;
&lt;p&gt;另外的像GitHub/Gitee Page服务，也可以将自己的图片上传到他们的服务器，但是据说会存在不稳定的情况，想了想还是算了。&lt;/p&gt;
&lt;p&gt;自己的东西掌握在自己手里才踏实，于是就自己搞了一个专属于自己的图床服务，这次倒是没有选择Django，而且选择了更合适轻量化的Flask。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markupsafe&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;secure_filename&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="n"&gt;env_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.env&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dotenv_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;env_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;STATIC_FOLDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/img/&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATIC_FOLDER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_url_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UPLOAD_FOLDER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STATIC_FOLDER&lt;/span&gt;
&lt;span class="n"&gt;basedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ALLOWED_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;JPG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PNG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xlsx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GIF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;HOSTNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HOSTNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# 用于判断文件后缀&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;allowed_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ALLOWED_EXTENSIONS&lt;/span&gt;


&lt;span class="c1"&gt;# 上传文件&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;strict_slashes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api_upload&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ACCESS_TOKEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;

    &lt;span class="n"&gt;time_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y/%m/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UPLOAD_FOLDER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;time_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 从表单的file字段获取文件，myfile为该表单的name值&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;allowed_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 判断是否是允许上传的文件类型&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secure_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 获取文件后缀&lt;/span&gt;
        &lt;span class="n"&gt;ran_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;new_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ran_str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;  &lt;span class="c1"&gt;# 修改了上传的文件名&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 保存文件到upload目录&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HOSTNAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;time_path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;不支持的文件格式！&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;仅需这些代码就可以搭建一个轻量的图片上传服务器，Flask真香～&lt;/p&gt;
&lt;p&gt;接下来就是配置Typora，在图片复制进来的时候自动上传到服务器&lt;/p&gt;
&lt;p&gt;在Typora→Preferences→Image→Image Uploader选择&lt;strong&gt;Custom Command&lt;/strong&gt;，同时在When Insert选择&lt;strong&gt;Upload image&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/kwhpUo4f.png" src="https://static.19961002.xyz/img/2022/kwhpUo4f.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;部署到服务器，接下来我们选择使用脚本来上传，那么就需要一个脚本来对接我们的图片服务器&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# 各类配置信息&lt;/span&gt;
&lt;span class="nv"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://img.itsso.cool/api/upload/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xxxxxxxxxx&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# 上传图片&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    curl -POST &lt;span class="nv"&gt;$base_url&lt;/span&gt; -H &lt;span class="s2"&gt;&amp;quot;Content-Type:multipart/form-data&amp;quot;&lt;/span&gt; -F &lt;span class="s2"&gt;&amp;quot;file=@&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -F &lt;span class="s2"&gt;&amp;quot;access_token=&lt;/span&gt;&lt;span class="nv"&gt;$access_token&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;点击Test Uploader就可以测试一下我们脚本是否可以正常上传&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/swQeFOjS.png" src="https://static.19961002.xyz/img/2022/swQeFOjS.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;现在来看一下效果如何，复制一张图片到Typora。&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/LAbunMRk.gif" src="https://static.19961002.xyz/img/2022/LAbunMRk.gif" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置WebHook让远程服务器自动拉取更新代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓webhook，就是用户可以自定义一种回调函数，通过这种回调函数来改变web应用的行为，这些回调函数可以是web应用的开发者，也可以是第三方用户，并且与原始的web应用没有关联。&lt;/p&gt;
&lt;p&gt;这里采用的是Flask搭建一个webhook服务，并通过该服务触发脚本来完成整个流程操作&lt;/p&gt;
&lt;p&gt;首先在GitHub上开通webhook，并添加secret，选择settings→webhooks&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/gWxHhzsb.png" src="https://static.19961002.xyz/img/2022/gWxHhzsb.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;使用Flask搭建一个简易的webhook服务，其中要注意对请求来源做验证，GitHub官方已经提供了验证方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For backward-compatibility, we also include the &lt;code&gt;X-Hub-Signature&lt;/code&gt; header that is generated using the SHA-1 hash function. If possible, we recommend that you use the &lt;code&gt;X-Hub-Signature-256&lt;/code&gt; header for improved security. The example below demonstrates using the &lt;code&gt;X-Hub-Signature-256&lt;/code&gt; header.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就是完整的代码：&lt;strong&gt;webhook.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# github中webhooks的secret&lt;/span&gt;
&lt;span class="n"&gt;github_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxxxxxx&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encryption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;github_secret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digestmod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sha256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    github加密是将post提交的data和WebHooks的secret通过hmac的sha256加密，放到HTTP headers的&lt;/span&gt;
&lt;span class="sd"&gt;    X-Hub-Signature256参数中&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;post_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encryption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 认证签名是否有效&lt;/span&gt;
    &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-Hub-Signature-256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;token认证无效&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;
    &lt;span class="c1"&gt;# 运行shell脚本，更新代码&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;auto_deploy.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要触发的脚本文件：&lt;strong&gt;auto_deploy.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--------Git fetch------------&amp;#39;&lt;/span&gt;
git fetch
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--------Git merge------------&amp;#39;&lt;/span&gt;
git merge
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-----Already up-to-date------&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;----- reload nginx-----&amp;#39;&lt;/span&gt;
nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来将webhook服务部署好，在项目文件夹下push代码的时候，就会触发该hook，在远程服务器自动将更新的代码拉取下来。&lt;/p&gt;
&lt;p&gt;到此为止，用了奇奇怪怪的方法实现了自己奇奇怪怪的想法。&lt;/p&gt;
&lt;p&gt;其实现在已经有很多很成熟的静态博客生成器，比如Hugo，Jekyll以及Hexo等等，以前搞过一次，后来网站没了，再加上觉得上传方式并不是那么Geek，也有可能是我没找到一些方便的方法，就直接放弃了。&lt;/p&gt;
&lt;p&gt;后来重新搭建网站的时候，就打算干脆直接搭建一个动态的网站，至少很多东西要比静态的灵活方便。&lt;/p&gt;
&lt;p&gt;至于现在为什么又变成这样了，那可能是&lt;/p&gt;
&lt;p&gt;脑子抽风了吧。&lt;/p&gt;</description><guid isPermaLink="false">django-staticize</guid><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Django批量创建时出现bulk_create内存异常</title><link>https://zorox.me/post/2021/django-bulk-create.html</link><description>&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为需要往项目数据库上传大量数据，数据是以文件的方式存储，所以采用django的&lt;strong&gt;bulk_create&lt;/strong&gt;批量读取并上传，但是在上传过程中发现，上传程序占用的内存一直在上升，甚至到最后直接把内存占满了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;排查问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚开始首先怀疑的就是程序代码有问题导致内存没有释放，自己看没发现什么问题，请教同事帮忙看也没有发现什么问题，所以干脆就硬着头皮去试代码。在每次循环之后都加入&lt;code&gt;gc.collect()&lt;/code&gt;,尝试主动释放内存，发现问题仍然存在。&lt;/p&gt;
&lt;p&gt;于是开始尝试内存排查工具&lt;strong&gt;tracemalloc&lt;/strong&gt;来排查什么地方一直在增加内存&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;batch_insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tracemalloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;start_snapshot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tracemalloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_snapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 建立快照&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;**/*.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# 内容整理&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# 批量插入数据库&lt;/span&gt;
                &lt;span class="n"&gt;Regulation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bulk_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 主动释放内存，&lt;/span&gt;
        &lt;span class="n"&gt;end_snapshot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tracemalloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_snapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;top_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_snapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lineno&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_stats&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%.1f&lt;/span&gt;&lt;span class="s2"&gt; KiB&amp;quot;&lt;/span&gt;
                  &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/RFK6GbLQ.png" src="https://static.19961002.xyz/img/2022/RFK6GbLQ.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/ewSJd0CP.png" src="https://static.19961002.xyz/img/2022/ewSJd0CP.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;发现内存主要的增长是在第一行，而且后面也主要和MySQLdb有关，那么就去看看到底是怎么回事，点开源码在发现&lt;code&gt;django/utils/encoding.py:62&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;force_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strings_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Similar to smart_str(), except that lazy instances are resolved to&lt;/span&gt;
&lt;span class="sd"&gt;    strings, rather than kept as lazy objects.&lt;/span&gt;

&lt;span class="sd"&gt;    If strings_only is True, don&amp;#39;t convert (some) non-string-like objects.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Handle the common case first for performance reasons.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strings_only&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_protected_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;UnicodeDecodeError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;DjangoUnicodeDecodeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然有注解，但还是不明所以，那最起码看看是谁在调用这个方法总也行吧&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -nr &lt;span class="s1"&gt;&amp;#39;force_str(&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现还不少调用，那就找到关键的信息继续往上追溯&lt;/p&gt;
&lt;p&gt;上面那么多虽然都有调用，但是与我们实际的使用情况不符，因为使用的mysql，所以发现红线部分挺符合预期，继续查看代码&lt;code&gt;django/db/backends/mysql/operations.py:171&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;last_executed_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# With MySQLdb, cursor objects have an (undocumented) &amp;quot;_executed&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# attribute where the exact query sent to the database is saved.&lt;/span&gt;
    &lt;span class="c1"&gt;# See MySQLdb/cursors.py in the source distribution.&lt;/span&gt;
    &lt;span class="c1"&gt;# MySQLdb returns string, PyMySQL bytes.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;force_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_executed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;继续查找调用改方法的地方&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -nr &lt;span class="s1"&gt;&amp;#39;last_executed_query(&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到源码&lt;code&gt;django./db/backends/utils.py:113&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_last_executed_query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;
  &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;use_last_executed_query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_executed_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# params could be an iterator.&lt;/span&gt;
          &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;
          &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queries_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; times: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;(&lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s1"&gt;) &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;; args=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;params&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;研究一下代码发现，&lt;code&gt;sql = self.db.ops.last_executed_query(self.cursor, sql, params)&lt;/code&gt;，在批量上传的时候，会将所有要上传的内容变成一条sql语句，到此为止目前还没发现有什么异常。&lt;/p&gt;
&lt;p&gt;但是看到下面这一段，Django将生成的sql语句保存起来，那这个对象会清空之前保存的sql吗？&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queries_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; times: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;(&lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s1"&gt;) &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;; args=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;params&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过Debug发现，是不会的，每生成一条sql就添加到&lt;code&gt;self.db.queries_log&lt;/code&gt;里，只要程序没有停止，那么这里边的sql就永远不会消失，所以真相大白，原来就是这个家伙导致的内存一直飙升。&lt;/p&gt;
&lt;p&gt;继续向上看，寻找是否存在参数可以选择是否保存这些sql，在&lt;code&gt;django/db/backends/utils.py:97&lt;/code&gt;发现这段代码&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_last_executed_query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现确实存在一个参数&lt;code&gt;use_last_executed_query&lt;/code&gt;，但是这个参数已经写死在代码里。。。&lt;/p&gt;
&lt;p&gt;尝试修改源码将&lt;code&gt;use_last_executed_query&lt;/code&gt;设置为False，运行代码发现问题解决。&lt;/p&gt;
&lt;p&gt;后来有尝试将sql语句放入&lt;code&gt;self.db.queries_log&lt;/code&gt;这段代码注释掉，运行代码仍然可以解决。&lt;/p&gt;
&lt;p&gt;至此已经发现问题的真正根源出在什么地方了，但是通过修改源码的方式总归是不合适的，继续尝试有没有Django自带的方案。经过查找发现&lt;code&gt;django/db/__init.py:26&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Register an event to reset saved queries when a Django request is started.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset_queries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queries_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;于是尝试在代码中引入该方法&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reset_queries&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# 插入数据库之前首先清空&lt;/span&gt;
&lt;span class="n"&gt;reset_queries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 批量插入数据库&lt;/span&gt;
&lt;span class="n"&gt;Regulation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bulk_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现问题完美的得到解决，完美！&lt;/p&gt;
&lt;p&gt;后来在官方文档中发现，已经有这个方法的相关文档&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/dmTAMrGI.png" src="https://static.19961002.xyz/img/2022/dmTAMrGI.png" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;文档中还说只有在&lt;code&gt;DEBUG=True&lt;/code&gt;时，这些sql语句才会保存起来以便有需要的时候查看sql。&lt;/p&gt;
&lt;p&gt;这也解答了我心中的一个疑问，系统运行时产生的sql为什么要保存起来呢，现在看来是我知识浅薄了。&lt;/p&gt;
&lt;p&gt;所以最终这个问题的解决方案有两个：&lt;/p&gt;
&lt;p&gt;一、将&lt;code&gt;DEBUG&lt;/code&gt;设置为False&lt;/p&gt;
&lt;p&gt;二、手动清除，引入&lt;code&gt;django.db.reset_queries&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就第一种方案而言，只有在生产环境下，DEBUG选项才会为False，所以在自己的电脑上或者测试机上运行，还是第二种方案比较好。&lt;/p&gt;</description><guid isPermaLink="false">django-bulk-create</guid><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Elasticsearch相关汇总</title><link>https://zorox.me/post/2021/elasticsearch-nested.html</link><description>&lt;p&gt;在使用Elasticsearch的过程中，难免会要去官网翻看文档，由于目前还没有读完文档，以至于在找一些没用过的API时还挺费劲，有时候甚至还可能找不到。因此就把目前已经用到过的地方在这里汇总记录一下，方便以后碰到的话可以直接去查看。&lt;/p&gt;
&lt;h2&gt;Index&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/indices.html#index-management"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/indices.html#index-management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Aliases&lt;/h2&gt;
&lt;p&gt;索引的一个别名，在某些情况下非常有用，比如在无缝切换索引的时候。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/aliases.html#aliases"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/aliases.html#aliases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mappings&lt;/h2&gt;
&lt;p&gt;索引的mapping定义十分重要，他决定了我们的数据是如何保存在索引内，以及保存的数据都有什么字段，各个字段的数据类型又是什么。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/mapping.html#mapping"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/mapping.html#mapping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/index-modules.html#index-modules-settings"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/index-modules.html#index-modules-settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Query&lt;/h2&gt;
&lt;h3&gt;Full text queries&lt;/h3&gt;
&lt;p&gt;全文检索相关，主要包含&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-query.html"&gt;match query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-bool-prefix-query.html"&gt;match_bool_prefix query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-query-phrase.html"&gt;match_phrase query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-query-phrase-prefix.html"&gt;match_phrase_prefix query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-multi-match-query.html"&gt;multi_match query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-query-string-query.html"&gt;query_string query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-bool-prefix-query.html"&gt;match_bool_prefix query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-query-phrase.html"&gt;match_phrase query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-query-phrase-prefix.html"&gt;match_phrase_prefix query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-multi-match-query.html"&gt;multi_match query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-query-string-query.html"&gt;query_string query&lt;/a&gt;等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/full-text-queries.html#full-text-queries"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/full-text-queries.html#full-text-queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compound queries&lt;/h3&gt;
&lt;p&gt;混合索引，包含&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-bool-query.html"&gt;bool query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-boosting-query.html"&gt;boosting query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-constant-score-query.html"&gt;constant_score query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-dis-max-query.html"&gt;dis_max query&lt;/a&gt;、&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-function-score-query.html"&gt;function_score query&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/compound-queries.html"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/compound-queries.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Function score query&lt;/h3&gt;
&lt;p&gt;用户可以通过自定义一个或多个查询语句来提高某些文档的比分权重，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-function-score-query.html#query-dsl-function-score-query"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-function-score-query.html#query-dsl-function-score-query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以通过&lt;strong&gt;script_score&lt;/strong&gt;使用脚本给每个文档重新打分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-function-score-query.html#function-script-score"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-function-score-query.html#function-script-score&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Highlight&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/highlighting.html#highlighting"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/highlighting.html#highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Prefix query&lt;/h3&gt;
&lt;p&gt;使用前缀查询可以返回前缀为指定前缀的文档，多用于即时搜索一类的提示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-prefix-query.html#query-dsl-prefix-query"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-prefix-query.html#query-dsl-prefix-query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Match phrase prefix query&lt;/h3&gt;
&lt;p&gt;当需要对一个短语或词组进行前缀查询时，就需要用到来进行搜索了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-query-phrase-prefix.html#query-dsl-match-query-phrase-prefix"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-match-query-phrase-prefix.html#query-dsl-match-query-phrase-prefix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Named query&lt;/h3&gt;
&lt;p&gt;通过使用&lt;code&gt;_name&lt;/code&gt;参数可以在多字段查询时知道是哪个子查询语句命中了该文档，并将结果返回在每个响应文档的&lt;code&gt;matched_queries&lt;/code&gt;字段内。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-bool-query.html#named-queries"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-bool-query.html#named-queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Nested query&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-nested-query.html#query-dsl-nested-query"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-nested-query.html#query-dsl-nested-query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Exists query&lt;/h3&gt;
&lt;p&gt;在某些情况下，并不是所有的字段都存在确切的值，可以通过&lt;strong&gt;Exists&lt;/strong&gt;来或者筛选包含某些字段的文档，同时配合&lt;strong&gt;must_not&lt;/strong&gt;可以来筛选所有存在该字段的文档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-exists-query.html#query-dsl-exists-query"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.16/query-dsl-exists-query.html#query-dsl-exists-query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scripts&lt;/h2&gt;
&lt;p&gt;ES的脚本语言是&lt;code&gt;painless&lt;/code&gt;，语法与Java类似，可直接按照Java的语法来编写检索脚本，具体可见地址：&lt;a href="https://www.elastic.co/guide/en/elasticsearch/painless/7.16/painless-api-reference-shared.html"&gt;Shard API &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里只记录一下自己使用到的，以便以后再遇到可直接CV。&lt;/p&gt;
&lt;h3&gt;删除数组内满足条件的元素&lt;/h3&gt;
&lt;p&gt;使用&lt;strong&gt;removeIf&lt;/strong&gt;来完成，例如删除ID为10的元素&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ctx._source.members.removeIf(list_item -&amp;gt; list_item.id == params.member_id)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;lang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;painless&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;member_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;判断数组内是否包含某一个对象&lt;/h3&gt;
&lt;p&gt;使用&lt;strong&gt;contains&lt;/strong&gt;来完成，返回包含&lt;code&gt;name&lt;/code&gt;为&lt;strong&gt;张三&lt;/strong&gt;的文档&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ctx._source.members.contains(params.name)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;lang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;painless&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;根据时间提高某些文档的权重&lt;/h3&gt;
&lt;p&gt;使用时间格式化方法&lt;strong&gt;toInstant&lt;/strong&gt;和&lt;strong&gt;toEpochMilli&lt;/strong&gt;来完成，将时间转换成毫秒级权重因子&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;lang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;painless&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;double dateScore; try {dateScore = Math.abs(doc[&amp;#39;enforcementDate&amp;#39;].value.toInstant().toEpochMilli()/1e12);} catch (Exception e) {dateScore=0;} return dateScore;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><guid isPermaLink="false">elasticsearch-nested</guid><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate></item><item><title>我不报歉｜人间失格</title><link>https://zorox.me/post/2021/ren-jian-shi-ge.html</link><description>&lt;p&gt;《人间失格》作为著名的“丧”文化代表，其实在读高中的时候就早已耳闻，只不过那时候学校赶的紧，再加上自己也不喜欢看书，就不了了之了。后来随着年纪的增长，虽说已经有大把的时间可以读完这本书，但这时自己又抗拒又害怕那种“丧”，所以也就一直没有去看过。&lt;/p&gt;
&lt;p&gt;至于为什么又突然看起来这本书了，可能是最近心情低落，而我又偏喜欢在心情不好的时候找些比较致郁的东西来听或者看，这样反而会觉得有那么一丝愉悦......&lt;/p&gt;
&lt;p&gt;断断续续用了将近两天的时间看完，书的内容确实很阴郁，整篇采用第一人称的方式，就好像一个坐在你面前的人，在絮絮叨叨他的一生。&lt;/p&gt;
&lt;p&gt;可能是没有什么文学素养，再或者是觉得他人的悲惨与自己无关，总之看的过程很平静，就好像是在观看一场一个人的悲惨演出而已。唯一一次动容的时刻，是在直治自杀之后写给姐姐的遗书里有这一段话。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我早就该死了。只是，唯一让我牵挂不下的便是慈爱的妈妈，想到这个我才没有去死。人，就像享有自由生存的权利一样，也享有决定自己什么时候死的权利，可是我觉得，只要母亲在世，这个死的权利是不得行使的，否则就等于是亲手将自己的母亲杀死。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概是因为在漫长的阴郁里，突然出现了一抹温柔吧。&lt;/p&gt;
&lt;p&gt;其实看到叶藏费尽心思去迎合别人的时候，也好像看到了以前自己的影子。&lt;/p&gt;
&lt;p&gt;学着抽烟，因为大家都抽烟&lt;/p&gt;
&lt;p&gt;学着打架，因为兄弟们打架不能少了你&lt;/p&gt;
&lt;p&gt;学着寒暄扯皮，因为你要嘴皮子玩的溜&lt;/p&gt;
&lt;p&gt;不懂拒绝，因为拒绝可能会伤了对方的心&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;年轻人看到什么书就以为自己是什么样的人，越仔细回想，就越有代入感，幸好以前并没有看这本书。&lt;/p&gt;
&lt;p&gt;倘若叶藏可以摒弃自己的懦弱和骄傲，包容自己的不足，他是不是就不会变成那样，包括直治也是。&lt;/p&gt;
&lt;p&gt;把他们当作是一部反面教材，鞭策自己，包容自己，活出自我。这样是否也算是这本灰暗阴郁的书的正面意义呢。&lt;/p&gt;
&lt;p&gt;最后附上书中的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一切都会过去的&lt;/p&gt;
&lt;/blockquote&gt;</description><guid isPermaLink="false">ren-jian-shi-ge</guid><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate></item><item><title>平庸者的崩坏｜绝叫</title><link>https://zorox.me/post/2021/jue-jiao.html</link><description>&lt;p&gt;最近看了一本日本的悬疑推理小说，讲的是一名出生在昭和年代的女人挣扎的前半生，读的过程一度绝望，甚至一度觉得它就是《被嫌弃的阳子的一生》。泡沫经济，失业，大地震，家庭暴力，校园暴力，自杀率攀升等种种因素结合在一起的日本社会，在这样的社会背景下，平庸的普通人只能一步一步的陷入黑暗。&lt;/p&gt;
&lt;p&gt;整本书是由三个线路分别同时叙事，同时也保证了结构安排合理，伏笔也埋的不深，所以整体读下来还是比较流畅的。&lt;/p&gt;
&lt;p&gt;首先一条线就是以第二人称为叙述方式，仿佛自己就是站在局外人或者是高高在上的审判者的角度一样，评论叙述着铃木阳子的一生，刚开始读的时候还很不习惯，直到最后才觉得这种叙述方式的巧妙之处。&lt;/p&gt;
&lt;p&gt;另外一条线是以女警官凌乃的角度来写的，作为这场刑事案件的负责人，对案件进行深入调查之后，发现腐烂在房间的死尸就是铃木阳子。同时在调查的过程中，两个人甚至还有了交集。&lt;/p&gt;
&lt;p&gt;最后一条线则是以对一个嫌疑犯八木审讯来记录的，刚开始看的时候会觉得莫名其妙，甚至一度因为他的审讯记录就觉得猜到了结局，其实则不然，这条线感觉更像是一个画外音。&lt;/p&gt;
&lt;p&gt;铃木阳子出生在一个重男轻女的家庭，自小都不受家庭重视，甚至连名字都是随便起的。&lt;/p&gt;
&lt;p&gt;自从弟弟纯子出生以后，阳子就备受母亲的忽视和否定。当纯子遭受校园暴力自杀之后，可笑的母亲甚至还相信纯子在学校里和其他人相处的很好，对阳子的态度始终如一。&lt;/p&gt;
&lt;p&gt;之后日本经济大崩盘，无数人失业自杀，阳子的父亲因为轻信股票可以带来高收益，导致负债上千万，又遇裁员致使失踪。因为阳子父亲的负债导致房子抵押，只好搬出去住，此时的母亲却独自一个人跑去舅舅家住，抛下阳子一个人不管。至此这个家已经完全分崩离析。&lt;/p&gt;
&lt;p&gt;之后阳子在当客服之后，遇到了当初暗恋的山崎，俩人成婚之后因为山崎的外遇和失业，又被迫离婚，期间只有两年多的时间。&lt;/p&gt;
&lt;p&gt;离婚之后的阳子又当上了保险推销员，在这期间经历了职场PUA，但是缺爱的他却以为上司是对他好，爱上了这个上司。甚至为了他去出卖的自己身体，通过性交易的手段来拉拢客户，去满足上司的要求。&lt;/p&gt;
&lt;p&gt;最后阳子虽然发现上司是一个渣男之后，但是他已经无法从这种泥沼中摆脱自我，辞去了保险的工作之后就去做了应召女。在做应召女的过程中，由于身心俱疲，无法辨识牛郎的陷阱，对牛郎的慰问呵护无法自拔。谁能想这个牛郎却也是个烂人，对阳子家暴，无付出一味的索取。&lt;/p&gt;
&lt;p&gt;突然有一天阳子下班的时候，被神代和其同伙拖上了车，抢走身上所有的钱财，并且强奸了阳子，阳子一度窒息而亡。此刻的阳子也开始觉醒。&lt;/p&gt;
&lt;p&gt;阳子和神代开始计划杀人骗保，第一个对象就是这个牛郎。之后因为这样来钱快，又寻找新的对象开始杀人骗保。阳子已完全堕入深渊。此刻的阳子已经开始反抗，合伙刺杀神代，独自杀害亲母，诱杀朋友，偷梁换柱，整个过程冰冷的像一个机器人一样。&lt;/p&gt;
&lt;p&gt;阳子本就是一个平庸的不能再平庸的人了，可奈何时代的灰尘落到普通人的身上竟会像一座山一样，压的人痛苦不堪，只得挣扎绝叫。&lt;/p&gt;</description><guid isPermaLink="false">jue-jiao</guid><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate></item><item><title>自我绑架</title><link>https://zorox.me/post/2021/zi-wo-bang-jia.html</link><description>&lt;p&gt;晚上做了一场似乎荒诞又真实的梦。&lt;/p&gt;
&lt;p&gt;在一栋正在修建的写字楼里，电梯已经布置好了并可以正常使用。我和一群人在电梯里缓缓上行，突然电梯门开了，应该是中途有人乘坐。然而电梯门打开之后，映入眼帘的却是一位老太太因为脚卡到破碎的一块墙体里边，不停的往外拔，旁边的老伴也一直在帮他用力，只是因为年纪大了，似乎并没有什么作用。&lt;/p&gt;
&lt;p&gt;我看到这一幕，立即就往电梯外走，同时跟电梯里的人说：“咱们去帮帮她吧，那个墙估计很沉，我们一起帮帮她...…”，同时又用手按着点击的闸门，防止它自动关上。&lt;/p&gt;
&lt;p&gt;可是任凭我怎么说，那些人好像听不到我说话一样，面无表情。僵持了好长一会，终于有一个人动了，本以为那人是要和我一起，哪知道那人就往前走了一步，推开了我的手，紧接着他按了一下关门键，电梯门缓缓关上，只剩我一个人在电梯外边。&lt;/p&gt;
&lt;p&gt;由于受到一些新闻影响，心里不自觉的有一些警惕性，觉得我应该拿手机拍下来整个过程，这样以防万一也好有个证据。可是就我一个人，一只手拿着手机的话，另外一只手就没办法抬起来那水泥墙。&lt;/p&gt;
&lt;p&gt;纠结无奈之下，觉得就把手机递给那老大爷，让他拿着手机拍，递过去之后心里也突然愧疚自己怎么能这么看人家，世界上哪有那么多坏人。&lt;/p&gt;
&lt;p&gt;由于是实打实的水泥墙，抬的过程是真费力且焦急。以至于没有心思保持自己的警惕。快要抬过去的时候，那大爷突然跟我说：“手机锁屏了，密码多少，要解开才能继续拍”。我这时正一心思抬东西，完全没有想太多，就把密码告诉他了。后来想想自己真蠢。&lt;/p&gt;
&lt;p&gt;过了一会，我终于把那老太太的腿拔出来，气喘吁吁的问那大爷要手机的时候，那大爷却说：“你问我要什么手机，我没见你的手机。&lt;/p&gt;
&lt;p&gt;”你手机拿的就是我的啊，刚才我让你帮我拍着视频“&lt;/p&gt;
&lt;p&gt;”这是我的啊，怎么会是你的，是你的你能解开吗“&lt;/p&gt;
&lt;p&gt;说完那大爷就把手机递给我，让我看看能不能解锁，我输入我的密码，发现已经不能解锁，人脸识别也不能用了，这时我才意识到，我刚告诉那大爷手机密码之后，手机密码已经被那大爷给改了。&lt;/p&gt;
&lt;p&gt;于此同时，那老太太也在拿手机拍着我，说到：&lt;/p&gt;
&lt;p&gt;”不行吧，不行就赶紧还给我们，你不还我就要报警了，我这可是录着像呢“&lt;/p&gt;
&lt;p&gt;脑子里血气上涌，感觉要被气死了，心里骂着：”操他妈的，这是被坑了啊“，可是我还是想着先好好聊，就语气平稳但还是略带一点急躁的问他们要，让他们还给我。&lt;/p&gt;
&lt;p&gt;突然，闹钟响了，突然把我从梦境中扯回到现实，可是我心里还是觉得很不爽，就赶紧把闹钟关了，试图再次进入这个梦里，我势必要把我的手机夺回来，我咽不下这口气！&lt;/p&gt;
&lt;p&gt;可惜，续梦失败！&lt;/p&gt;
&lt;p&gt;躺在床上的我回想着这场的梦，长舒一口气，感叹这还好只是场梦。&lt;/p&gt;
&lt;p&gt;假如这不是梦，我又会不会后悔自己一个人走出电梯。&lt;/p&gt;
&lt;p&gt;以前在微博上看到一个博主的视频，他们会组织演员去街头扮演一些弱势群体，看看路人的反应。比如腿脚不利索的大爷过马路，拐卖儿童的贩子等等，视频中总是会有热情的人愿意仗义相助。&lt;/p&gt;
&lt;p&gt;我看的时候我就在想，假如我真的遇到这种情况，我是否会像他们一样，仗义相助呢？&lt;/p&gt;
&lt;p&gt;从小接受的教育告诉我们，应该是要这么做的。&lt;/p&gt;</description><guid isPermaLink="false">zi-wo-bang-jia</guid><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate></item><item><title>7.20暴雨日记</title><link>https://zorox.me/post/2021/7-20-bao-yu-ri-ji.html</link><description>&lt;p&gt;2021年7月20日，身处中原的郑州，刚经历了一场百年以来难得一遇的特大暴雨。&lt;/p&gt;
&lt;p&gt;雨刚开始下的时候，还以为只是普通的一场大雨，我还跟朋友说不想去上班，但是拥有超高打工人觉悟的我还是去上了班。&lt;/p&gt;
&lt;p&gt;哈哈哈，其实是因为这个月的假期已经用完，去上班只是为了不扣工资。&lt;/p&gt;
&lt;p&gt;结果就是，直到下班的时候雨还在下，此时外边路面上的水已经快到膝盖了，地铁也已经停运，附近酒店也被订满，只剩下一些“天价房”。
还好可以留宿在朋友家，不然就只能住公司了。&lt;/p&gt;
&lt;p&gt;21号一大早醒来，没水没电没信号，彷佛突然与外界隔绝了一样，郑州好像变成了一座没有互联网的城市。
可以联系上外界的时候，也是快到晚上了。雨中午已经停了，到晚上的时候小区路面已经很少水了。&lt;/p&gt;
&lt;p&gt;在小区门口找到了一点微弱的信号，立马就给家里和朋友报了平安，免得他们太过担心，但是也只停留在可以打电话发短信的程度。&lt;/p&gt;
&lt;p&gt;22号路面基本上已经没水了，我们几个失联群众步行去公司上班。
手机也在快到公司附近时来了信号，一大堆的信息和未接电话。&lt;/p&gt;
&lt;p&gt;好像就是只有外边的人才知道郑州里边有多严重，我们在郑州里边好像没事人一样。&lt;/p&gt;
&lt;p&gt;23号依旧没水没电，所以就早早来了公司蹭水蹭电。由于交通瘫痪，只有公司附近的人才能过来上班，所以公司人并不多。
由于是周五，再加上已经几天没回家了，就想着回去看看。
下班的时候地铁还没通，公交也要将近三个小时才能回去。
不过还好可以搭乘朋友的车，就跟他一起回家了。挺好的是，家里边已经开始有电有网了，水可能还要晚点才能来。&lt;/p&gt;
&lt;p&gt;暴雨过后，这座城市变得一片狼藉，也有人不幸罹难，彷佛人类在大自然面前就像渺小的蚂蚁一样。
但是，一切正在努力恢复，它也正在慢慢变好。&lt;/p&gt;
&lt;p&gt;暴雨冲刷了房屋街道，同时也冲刷了人们内心的浮躁。&lt;/p&gt;
&lt;p&gt;珍惜眼前的小确幸！&lt;/p&gt;</description><guid isPermaLink="false">7-20-bao-yu-ri-ji</guid><pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate></item><item><title>半日偷闲，絮絮叨叨</title><link>https://zorox.me/post/2021/xu-xu-dao-dao.html</link><description>&lt;p&gt;马上就要六月了，代表着今年已经是过完小半年了。虽说夏天还没有正式的到来，可是外面的温度已经高达38℃了，这让人很难想象后面的天气会有多热。躲在空调冷风下的我，像往常周末一样，无聊的刷着短视频，手指不间断的向上滑动。可能是刷视频刷累了吧，突然想通过文字叨叨这半年。回头看这小半年，生活过得像往常一样琐碎忙碌，而且自己也没有干出来什么值得骄傲的成绩。好像也没什么可写的，那既然这样，干脆就写点琐碎吧，毕竟生活都是由琐碎的生活片段拼凑而成的。&lt;/p&gt;
&lt;p&gt;最近正在看科幻小说《三体》，目前只看到大概一半吧，觉得网上对三体的评价果然不是吹的，就是刚开始的部分会让人觉得好像这不是一本科幻小说，如果继续看下去的话真的会觉得这本书真是宝藏。由于还没看完，也并不能对此作出过多的评价，就目前来说，他改变了我对科幻固有的认知，心中会不由得惊叹：“原来还可以这样！”，完全想不到下一页的剧情会是什么。&lt;/p&gt;
&lt;p&gt;最近也有一件好玩的事，公司的一名翻译王同学，正在学习跟他的专业八竿子打不着的东西：数学和编程。问她为什么想要学习这些东西，她回答说：“我现在掌握的东西都太偏文科了，想学习一下理科的东西”。于是乎我就成了她的一个“老师”，她有时候有不会的问题也会向我请教，但是每次问的问题都很奇怪，有时候都不知道怎么回答，还有每次回答完他还会象征性的给我出五毛的劳务费。。。 真怕他问到我也不会的东西，回答不出来那岂不是很尴尬。&lt;/p&gt;
&lt;p&gt;这半年下来我们IT部也离职了两个人，目前就剩下两个后端一个前端了，老板最近的打算是不招新人，这我也能理解，因为最近的工作的确不多，三个人足以应付的过来。在第一个跟我同时期来的人离职后，老板也专门找过我问我的情况，我也向他表态说了不会离职，同事也趁此机会向老板提了提加薪的事，最后也是如愿以偿。其实在这个公司两年左右的时间，工作的也蛮舒服的，虽说规模不大，但是却并没有乱七八糟的规章制度，这也是我选择继续留在这里的一部分原因。另外关于技术方面，最近半年除了维护一些旧项目以外，也在开发一个新的检索系统，技术上也不会是重复造轮子。&lt;/p&gt;
&lt;p&gt;前段时间也看了一部超级好看的连续剧《觉醒年代》，是一部纪念建党一百周年的优秀电视剧展播。电影般的镜头光感、优秀的人物演绎。作为一个理科生，曾经在高一下学期就已经逃离历史的魔爪，所以我可以说是一个历史白痴。但是通过看这部剧，我好像更深入得了解了那段历史，那段我国优秀历史人物的光辉岁月。&lt;/p&gt;
&lt;p&gt;今年三月份也搬了新家，因为之前一起住的两个朋友今年去别的地方发展了，再加上跟房东也不太合得来，就决定换一个地方住了，最后走的时候押金都没退。不得不说，郑州的租房市场似乎已经全被中介和托管占领了，想找一个房东直租的都要费好大劲，或者也可能是我们找的方式不对吧。另外，搬家真的很累很累！搬家之前是收拾东西，看着房间的东西觉得并没有多少，哪知道越收拾越多，三个人的东西客厅都占满了。到后来把东西搬到新家的时候，大包小包从一楼五楼，最后走路腿都是抖的，，，累坏我了。&lt;/p&gt;
&lt;p&gt;现在记忆力也不太好，有些事情都已经忘记了，絮絮叨叨的写了一些琐碎的事情，记录这庸碌琐碎的小半年。在接下来的时间里，若是能摆脱一点这种庸碌的状态当然更好，若不能的话，那就这样吧，庸碌但能追求真实其实也挺好。&lt;/p&gt;
&lt;p&gt;突然想到我的这个网站，已经挺久时间没有更新过文章了，本来给自己定的是一周更新一篇，现在看来也算是食言了。其实对于我个人而言，似乎很少通过文字来记录自己，可能是性格使然，对于生活中的心事经常苦闷心中然后慢慢消化，而对于有趣好玩的事情我也是一个人乐呵完之后就没有然后，手机上的日记同样也只是断断续续的更新；也可能是自认为文笔不行，写出来的东西连自己都觉得丢脸，又何必写出来让人取笑呢。好像文字对于我而言，似乎只是颜如玉与黄金屋吧。&lt;/p&gt;</description><guid isPermaLink="false">xu-xu-dao-dao</guid><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate></item><item><title>爱上听鲸歌</title><link>https://zorox.me/post/2021/ting-jing-ge.html</link><description>&lt;p&gt;不知道怎么回事，最近喜欢偷空听鲸鱼的叫声，声音空灵、纯静，可以让人紧绷的神经放松下来。很多次因为工作感到烦躁，亦或是晚上躺床上失眠的时候，都会打开手机听听鲸鱼的叫声，心境瞬间就平和下来了。&lt;/p&gt;
&lt;p&gt;其实最开始听到鲸鱼的叫声是某短视频平台听到的，是一只座头鲸的叫声，刚听到的时候真的是让人惊艳且陶醉。于是就在网上寻找更多这样的声音，在搜索的过程中发现也有好多爱听鲸歌的，当然也有一些害怕听见鲸鸣的。&lt;/p&gt;
&lt;p&gt;喜欢的人觉得这是一种心灵的洗礼，置身事外而又与世无争。害怕的人则大都是有深海恐惧症，深邃浩瀚仿佛置人于汪洋深海而又孤身一人。&lt;/p&gt;
&lt;p&gt;一首最近经常听的歌：&lt;a href="https://c.y.qq.com/base/fcgi-bin/u?__=oHL1GdU" title="Whale sounds 2 hours"&gt;Whale sounds 2 hours&lt;/a&gt;，两个小时的鲸鱼叫声，欢快、希望、孤独尽在其中。&lt;/p&gt;</description><guid isPermaLink="false">ting-jing-ge</guid><pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate></item><item><title>Run Elasticsearch by docker</title><link>https://zorox.me/post/2021/docker-elasticsearch.html</link><description>&lt;p&gt;&lt;strong&gt;1. Download the docker image of Elasticsearch, taking version 7.6.0 as an example&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    docker pull elasticsearch:7.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;2. Create a container and run it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;if your command is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;   docker run -d --name es -p &lt;span class="m"&gt;9200&lt;/span&gt;:9200 -p &lt;span class="m"&gt;9300&lt;/span&gt;:9300 elasticsearch:7.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may exit shortly after starting. To find out the reason, view logs by log command:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;   docker logs es
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some error message like &lt;code&gt;max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]&lt;/code&gt; may appear. Go the following command:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;   &lt;span class="c1"&gt;# change the variable&lt;/span&gt;
   sysctl -w vm.max_map_count&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;262144&lt;/span&gt;
   &lt;span class="c1"&gt;# check the variable value&lt;/span&gt;
   sysctl -n vm.max_map_count
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the error message is &lt;code&gt;the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured&lt;/code&gt;, which means the container has wrong configuration and can be corrected by setting those prompted environment variables or setting to standalone development mode by &lt;code&gt;discovery.type=single-node&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In short, the correct command is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;   docker run -d --name es -p &lt;span class="m"&gt;9200&lt;/span&gt;:9200 -p &lt;span class="m"&gt;9300&lt;/span&gt;:9300 -e discovery.type&lt;span class="o"&gt;=&lt;/span&gt;single-node elasticsearch:7.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using IK Chinese segmentation plugin.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Download the plugin.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The plugin version must equal the Elasticsearch version. Version 7.6.0 download link is &lt;a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.0/elasticsearch-analysis-ik-7.6.0.zip"&gt;https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.0/elasticsearch-analysis-ik-7.6.0.zip&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Unzip to an empty directory, which is referred to as  &lt;em&gt;&lt;code&gt;$IK&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Copy the &lt;em&gt;&lt;code&gt;$IK&lt;/code&gt;&lt;/em&gt; into the directory of the container's plugin.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;   docker cp &lt;span class="nv"&gt;$IK&lt;/span&gt; es:/usr/share/elasticsearch/plugins/ik
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This plugin provides analyzer and tokenizer named &lt;code&gt;ik_smart&lt;/code&gt; and &lt;code&gt;ik_max_word&lt;/code&gt; where &lt;code&gt;ik_smart&lt;/code&gt; splits by the coarsest granularity, while &lt;code&gt;ik_max_word&lt;/code&gt; will exhaust all kinds of split combinations.&lt;/p&gt;
&lt;p&gt;Find more info at &lt;a href="https://github.com/medcl/elasticsearch-analysis-ik"&gt;IK&lt;/a&gt;.&lt;/p&gt;</description><guid isPermaLink="false">docker-elasticsearch</guid><pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate></item><item><title>Confession of a salted fish</title><link>https://zorox.me/post/2021/confession-of-a-salted-fish.html</link><description>&lt;p&gt;Today, I listened to the sound of the drum all day that didn't stop till evening. So I was thinking whose child was training so hard. By contrast, I played all day, which made me feel guilty.&lt;/p&gt;
&lt;p&gt;I wonder if I've done something like that. I wonder if I study in my spare time like that child. It seems very seldom.&lt;/p&gt;
&lt;p&gt;Some time ago, I developed this website and wanted to use it to record my coding notes. However, after it was established, I have tossed it many times, such as changing the theme of the website, adding some new features, but have not focused on the content of the website and sticked to writing.&lt;/p&gt;
&lt;p&gt;So I was wondering why I did this,  why I developed this website at the beginning. It's just for me to take notes in my coding time. I found that I had violated my original intention.&lt;/p&gt;
&lt;p&gt;Since I started working，taking notes and diary happened only occasionally. When I want to do that, I just do it in the beginning days, hardly to keep the impetus of that. Not only blogging, but aslo learning English. I have wanted to learn English many times, but I never sticked to it, so I don't learn English well, nor can I read computer documentation smoothly.&lt;/p&gt;
&lt;p&gt;In the end, actually my main purpose of writing this blog is to practice my English, and also to reflect and spur myself，although it's all nonsense.&lt;/p&gt;</description><guid isPermaLink="false">confession-of-a-salted-fish</guid><pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate></item><item><title>Fulltext searching with whoosh and Jieba</title><link>https://zorox.me/post/2021/fulltext-searching-with-whoosh-and-jieba.html</link><description>&lt;h2&gt;Environment dependencies&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;haystack&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;jieba&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;whoosh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Environment configuration&lt;/h2&gt;
&lt;p&gt;Add this configuration in &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;haystack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#register fulltext searching framework&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#the configuration of fulltext searching&lt;/span&gt;
&lt;span class="n"&gt;HAYSTACK_CONNECTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# use the whoosh search engine&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haystack.backends.whoosh_backend.WhooshEngine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;# Specifies the default path of the index files generated by the index data corresponding to the keyword. When using the custom index file, write the custom file path here.&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoosh_index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;#  the file path of the index files.&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Auto generate indexes when add, change and delete data in database tables.&lt;/span&gt;
&lt;span class="n"&gt;HAYSTACK_SIGNAL_PROCESSOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haystack.signals.RealtimeSignalProcessor&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create &lt;code&gt;search_indexs.py&lt;/code&gt; in applications which need support searching.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;haystack&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;apps.blog.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Indexable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;templates&lt;/code&gt; folder of the project, create folder structure like &lt;code&gt;search/indexes/article/article_text.txt&lt;/code&gt;, where &lt;code&gt;article&lt;/code&gt; is the lowercased model name.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Specifies which fields in the table to index&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;  &lt;span class="c1"&gt;# index Title field&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;   &lt;span class="c1"&gt;# index Body field&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add search route&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;haystack.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add search form in the template.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            {% csrf_token %}
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;searchAria&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;searching()&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onblur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;offsearch()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;searchInput&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none; border: none;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;border: none; display: none;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submitInput&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navPlugs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fa fa-search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;aria-hidden&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tips: there must be an input tag whose attribute named &lt;strong&gt;name&lt;/strong&gt; equals &lt;strong&gt;q&lt;/strong&gt; in the form.&lt;/p&gt;
&lt;p&gt;The following is the page of search results.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jupe main-body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            {% if query and page.object_list %}
                {% for result in page.object_list %}
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-title&amp;quot;&lt;/span&gt;
                           &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ result.object.get_absolute_url }}&amp;quot;&lt;/span&gt;
                           &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ result.object.title }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ result.object.title | truncatesmart:34 }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ result.object.create_time | date:&amp;quot;Y.m.d&amp;quot; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                {% empty %}
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Not found&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                {% endfor %}

                {% if is_paginated %}{% load_pages %}{% endif %}
            {% else %}
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Found nothing. Try to search by another keyword&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            {% endif %}

        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Build index&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;rebuild_index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configure Jieba Chinese Search&lt;/h2&gt;
&lt;p&gt;Because the default engine of whoosh doesn't support Chinese, u need to improve it.&lt;/p&gt;
&lt;p&gt;Copy the default engine file &lt;code&gt;\site-packages\haystack\backends\whoosh_backend.py&lt;/code&gt; to the project folder and rename it to &lt;code&gt;whoosh_cn_backend&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Open it and import Jieba Chinese analyzer &lt;code&gt;from jieba.analyse import ChineseAnalyzer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Replace &lt;code&gt;StemmingAnalyzer&lt;/code&gt; in the file with &lt;code&gt;ChineseAnalyzer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Change the file path of search engine to custom path in &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'ENGINE': 'apps.search.whoosh_cn_backend.WhooshEngine'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Rebuild index &lt;code&gt;python manage.py rebuild_index&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It supports Chinese search now.&lt;/p&gt;</description><guid isPermaLink="false">fulltext-searching-with-whoosh-and-jieba</guid><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate></item><item><title>OAuth2简述</title><link>https://zorox.me/post/2021/oauth2.html</link><description>&lt;h2&gt;什么是OAuth2&lt;/h2&gt;
&lt;p&gt;OAuth2是一个服务开放（授权）标准，它表示允许用户授权第三方应用访问该用户在另外一个服务器存储的用户信息，而不用将存储在该服务器的用户名以及密码或所有用户信息告知给第三方应用。&lt;/p&gt;
&lt;h2&gt;OAuth2的应用场景&lt;/h2&gt;
&lt;p&gt;当你想使用QQ登录的第三方应用时，此时第三方应用需要获取你的QQ信息（昵称、头像、openid等），但是又不能直接用户名和密码等信息。那么此时就需要你登录你的QQ服务器，然后授权给该第三方应用一部分信息。而OAuth2就是为了实现上述目标而制定的一种规范。&lt;/p&gt;
&lt;h2&gt;Oauth2的授权模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;授权码（authorization code）&lt;/li&gt;
&lt;li&gt;隐藏式（implicit）&lt;/li&gt;
&lt;li&gt;密码式（resource owner password credentials）&lt;/li&gt;
&lt;li&gt;客户端凭证（client credentials）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;授权码&lt;/h3&gt;
&lt;p&gt;授权码模式，指的是第三方应用先申请一个授权码，然后再拿着该授权码获取令牌。&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/v2-ba94a5f1e17b74e8cb8176620997ac27_720w_20210312134440865081.jpg" src="https://static.19961002.xyz/img/2022/v2-ba94a5f1e17b74e8cb8176620997ac27_720w_20210312134440865081.jpg" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问第三方应用客户端，随后该客户端跳转到认证服务器，跳转的过程中附带上重定向URI。&lt;/li&gt;
&lt;li&gt;用户在认证服务器给予授权之后，跳转到事先定义好的redirect_uri，并返回上一个授权码，该授权码是与当前客户端绑定的，无法被其他客户端使用。&lt;/li&gt;
&lt;li&gt;客户端收到该授权码，携带上步骤1中的redirect_uri，向认证服务器申请令牌。请求成功后认证服务器会返回一个令牌，该令牌存在一个有效时间。&lt;/li&gt;
&lt;li&gt;客户端拿到该令牌之后，将该令牌携带在请求中请求资源服务器，资源服务器判断该令牌的有效性，最终判断是否返回有效的资源信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;隐藏式&lt;/h3&gt;
&lt;p&gt;当有些网站时纯前端架构的时候，就无法通过后端来使用上述的授权模式了，令牌必须存在前端。该模式下不通过第三方应用的服务器，直接在浏览器里想认证服务器申请令牌，跳过了授权码的步骤。所有步骤都是在浏览器内完成，令牌对访问者是可见的，并且客户端不需要认证。&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/15209061-2d1bb6aa3925ca0d_20210312134459743467.webp" src="https://static.19961002.xyz/img/2022/15209061-2d1bb6aa3925ca0d_20210312134459743467.webp" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端在页面内放置一个链接，该链接指向认证服务器&lt;/li&gt;
&lt;li&gt;用户点击授权，给该客户端授权&lt;/li&gt;
&lt;li&gt;认证服务器在授权之后将跳转到客户端指定的redirect_uri，并将令牌包含在URI中，其中令牌并不是以查询参数的形式存储在URI中，而是以锚点的形式存储。&lt;/li&gt;
&lt;li&gt;浏览器想服务器发起请求，资源服务器返回一个网页，网页内包含一个可以获取上述令牌的脚本&lt;/li&gt;
&lt;li&gt;浏览器执行脚本，提取令牌，发送给客户端&lt;/li&gt;
&lt;li&gt;客户端拿到令牌向资源服务器请求，资源服务器判断该令牌的有效性，最终判断是否返回有效的资源信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;密码式&lt;/h3&gt;
&lt;p&gt;听名字我们就可以知道，该授权模式需要密码来进行。其实质是，如果你高度信任某个应用，那么可以直接告诉这个应用你的用户名和密码，然后该应用拿到这些信息去申请令牌。&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/15209061-38d92855ebb979d1_20210312134513088188.webp" src="https://static.19961002.xyz/img/2022/15209061-38d92855ebb979d1_20210312134513088188.webp" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户向第三方应用提供用户名和密码&lt;/li&gt;
&lt;li&gt;该应用将用户名和密码发送给认证服务器，然后请求令牌&lt;/li&gt;
&lt;li&gt;认证服务器确认无误后，想客户端提供令牌&lt;/li&gt;
&lt;li&gt;客户端拿到令牌向资源服务器请求，资源服务器判断该令牌的有效性，最终判断是否返回有效的资源信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;客户端凭证&lt;/h3&gt;
&lt;p&gt;客户端凭证模式下，即是通过客户端的名义，而不是用户的名义去获取令牌。该模式下可以在纯后端进行，常见的参数有client_id、client_secret。&lt;/p&gt;
&lt;p&gt;
&lt;div style="text-align:center"&gt;&lt;img data-src="https://static.19961002.xyz/img/2022/15209061-193021c225466558_20210312134535387332.webp" src="https://static.19961002.xyz/img/2022/15209061-193021c225466558_20210312134535387332.webp" /&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向认证服务器发送一个携带client_id和client_secret的请求&lt;/li&gt;
&lt;li&gt;认证服务器接收到客户端请求，并验证client_id和client_secret的有效性，如果有效这向客户端提供令牌。&lt;/li&gt;
&lt;/ol&gt;</description><guid isPermaLink="false">oauth2</guid><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate></item><item><title>What is JWT?</title><link>https://zorox.me/post/2021/jwt.html</link><description>&lt;h2&gt;What is JWT?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.
Although JWTs can be encrypted to also provide secrecy between parties, we will focus on signed tokens. Signed tokens can verify the integrity of the claims contained within it, while encrypted tokens hide those claims from other parties. When tokens are signed using public/private key pairs, the signature also certifies that only the party holding the private key is the one that signed it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Application scenarios&lt;/h2&gt;
&lt;h3&gt;Single Sign On&lt;/h3&gt;
&lt;p&gt;This is the most common scenario to use JWT. In a multi-system service architecture, after a user logged in to one system at first time, there is no need to log in repeatedly when using other systems.&lt;/p&gt;
&lt;h3&gt;Authorization&lt;/h3&gt;
&lt;p&gt;After a user logged in, every subsequent request contains JWT. When the JWT is verified, the user is allowed to access the resource he should access.&lt;/p&gt;
&lt;h2&gt;Components of JWT&lt;/h2&gt;
&lt;p&gt;JWT consists of three parts: Header, Payload, Signature, and they are connected with a dot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Header consists of two parts: the type of token and the signing algorithm being used, e.g. :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;alg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HS256&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;yp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JWT&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The Payload is actually a place to store valid information which has three types of claims. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Registered claims: Predefined claims which are not mandatory but recommended. Such as &lt;code&gt;iss(issuer)&lt;/code&gt; and &lt;code&gt;exp(expiration time)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Public claims: They can be defined at will.&lt;/p&gt;
&lt;p&gt;Private claims: These are the custom claims created to share information between parties that agree on using them and are neither registered or public claims.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Signature is a digital signature to prevent data from being tampered.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How is JWT generated&lt;/h2&gt;
&lt;p&gt;JWT is divided into three parts. How do these three parts come together to form a completed JWT?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Header is encoded by base64 to get the first part.&lt;/li&gt;
&lt;li&gt;The Payload is encoded by base64 to get the second part.&lt;/li&gt;
&lt;li&gt;Through the algorithm in Header with a secret sign that encoded Header and encoded Payload and Connected with dot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tips: Jwt is not encrypted, so it's better not to store some sensitive information directly in JWT.&lt;/p&gt;
&lt;h2&gt;Workflow of JWT&lt;/h2&gt;
&lt;p&gt;After successful login for the first time, the user will get a JWT. This JWT is the certificate for the user to interact with the server, that is, the server uses this token to determine which user the requester is.
When the user wants to access the resources on the server, the token was sent, which is usually placed in &lt;code&gt;authorization&lt;/code&gt;, using &lt;code&gt;bearer&lt;/code&gt; schema.
For example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Authorization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bearer&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What are the advantages over traditional session authentication?&lt;/h2&gt;
&lt;h3&gt;Session authentication&lt;/h3&gt;
&lt;p&gt;Because HTTP is a stateless protocol, we provide our user name and password for authentication when we first access it. Then, in the second visit, we still need to carry out a user authentication. Because according to the HTTP protocol, we don't know who the originator of the request is, in order to identify which user initiated the request, we can only save a copy of the user's information on the server, and then pass the same information to the user, so that the user can save it in cookies. In the next request, you only need to carry the information in the cookies. According to the submitted cookies, the server can determine which user it is. This is the traditional authentication based on session.&lt;/p&gt;
&lt;h3&gt;Problems in session based authentication&lt;/h3&gt;
&lt;p&gt;Session: after each user has been authenticated by our application, our application needs to make a record on the server to facilitate the authentication of the next request. Generally speaking, the session is saved in memory. With the increase of authenticated users, the cost of the server will increase significantly.&lt;/p&gt;
&lt;p&gt;Scalability: after user authentication, the server makes authentication records. If the authentication records are saved in memory, it means that the next request of the user must be on this server, so that the authorized resources can be obtained. This also means that the expansion ability of the application is limited.&lt;/p&gt;
&lt;p&gt;CSRF: because user identification is based on cookie, if cookie is intercepted, users will be vulnerable to cross site request forgery attack.&lt;/p&gt;
&lt;h3&gt;What are the advantages of JWT based authentication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tokens are stored in the client, completely stateless and scalable.&lt;/li&gt;
&lt;li&gt;Security: token is different from a cookie. Each request will send a token. Since no cookie is sent, it can also prevent CSRF attacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;reference from https://jwt.io/introduction&lt;/p&gt;
&lt;/blockquote&gt;</description><guid isPermaLink="false">jwt</guid><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate></item><item><title>MySQL创建用户和配置远程连接</title><link>https://zorox.me/post/2020/mysql-remote-connection.html</link><description>&lt;h2&gt;创建远程连接用户&lt;/h2&gt;
&lt;p&gt;在某些情况下，可能别人需要连接你的数据库进行操作，出于安全考虑，我们需要新建一个用户，让该用户只具有一部分的操作权限操作数据库。&lt;/p&gt;
&lt;p&gt;当然如果只有你一个人使用这个数据库的话，也可以跳过这一步，直接选择root用户来操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用help命令查看如何创建用户&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;help&lt;/span&gt; create user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Name: &lt;span class="s1"&gt;&amp;#39;CREATE USER&amp;#39;&lt;/span&gt;
Description:
Syntax:
CREATE USER user_specification
    &lt;span class="o"&gt;[&lt;/span&gt;, user_specification&lt;span class="o"&gt;]&lt;/span&gt; ...

user_specification:
    user
    &lt;span class="o"&gt;[&lt;/span&gt;
        IDENTIFIED BY &lt;span class="o"&gt;[&lt;/span&gt;PASSWORD&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; IDENTIFIED WITH auth_plugin &lt;span class="o"&gt;[&lt;/span&gt;AS &lt;span class="s1"&gt;&amp;#39;auth_string&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据帮助说明，接下来我们来创建用户&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;create user &lt;span class="s1"&gt;&amp;#39;zjc&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 创建一个用户zjc，不需要密码即可登录，但只可以在本机登录&lt;/span&gt;
create user &lt;span class="s1"&gt;&amp;#39;zjc&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;   &lt;span class="c1"&gt;# 创建一个用户zjc，不需要密码即可登录，可以在任意主机登录&lt;/span&gt;
create user &lt;span class="s1"&gt;&amp;#39;zjc&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;    &lt;span class="c1"&gt;# 创建一个用户zjc，登录时需要密码123456才可以登录，会自动将密码加密&lt;/span&gt;
create user &lt;span class="s1"&gt;&amp;#39;zjc&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt; identified by password &lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 创建一个用户zjc，登录时需要密码123456才可以登录，会将密码明文存储&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;修改密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; PASSWORD&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;newpassword&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看帮助命令查看详情&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; password
Name: &lt;span class="s1"&gt;&amp;#39;SET PASSWORD&amp;#39;&lt;/span&gt;
Description:
Syntax:
SET PASSWORD &lt;span class="o"&gt;[&lt;/span&gt;FOR user&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        PASSWORD&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cleartext password&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; OLD_PASSWORD&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cleartext password&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;encrypted password&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改密码：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zjc&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; PASSWORD&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;654321&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;删除用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;drop user username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;用户授权&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;查看用户目前的权限&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; show grants &lt;span class="k"&gt;for&lt;/span&gt; zjc&lt;span class="p"&gt;;&lt;/span&gt;
+---------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Grants &lt;span class="k"&gt;for&lt;/span&gt; zjc@%                &lt;span class="p"&gt;|&lt;/span&gt;
+---------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; GRANT USAGE ON *.* TO &lt;span class="sb"&gt;`&lt;/span&gt;zjc&lt;span class="sb"&gt;`&lt;/span&gt;@&lt;span class="sb"&gt;`&lt;/span&gt;%&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+---------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;USAGE相当于一个占位符，表示目前zjc用户什么权限都没有，需要我们给他授予权限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;授权该用户权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grant privileges ON databasename.tablename to &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样使用help命令详情&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; &lt;span class="nb"&gt;help&lt;/span&gt; grant
Name: &lt;span class="s1"&gt;&amp;#39;GRANT&amp;#39;&lt;/span&gt;
Description:
Syntax:
GRANT
    priv_type &lt;span class="o"&gt;[(&lt;/span&gt;column_list&lt;span class="o"&gt;)]&lt;/span&gt;
      &lt;span class="o"&gt;[&lt;/span&gt;, priv_type &lt;span class="o"&gt;[(&lt;/span&gt;column_list&lt;span class="o"&gt;)]]&lt;/span&gt; ...
    ON &lt;span class="o"&gt;[&lt;/span&gt;object_type&lt;span class="o"&gt;]&lt;/span&gt; priv_level
    TO user_specification &lt;span class="o"&gt;[&lt;/span&gt;, user_specification&lt;span class="o"&gt;]&lt;/span&gt; ...
    &lt;span class="o"&gt;[&lt;/span&gt;REQUIRE &lt;span class="o"&gt;{&lt;/span&gt;NONE &lt;span class="p"&gt;|&lt;/span&gt; ssl_option &lt;span class="o"&gt;[[&lt;/span&gt;AND&lt;span class="o"&gt;]&lt;/span&gt; ssl_option&lt;span class="o"&gt;]&lt;/span&gt; ...&lt;span class="o"&gt;}]&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;WITH with_option ...&lt;span class="o"&gt;]&lt;/span&gt;

GRANT PROXY ON user_specification
    TO user_specification &lt;span class="o"&gt;[&lt;/span&gt;, user_specification&lt;span class="o"&gt;]&lt;/span&gt; ...
    &lt;span class="o"&gt;[&lt;/span&gt;WITH GRANT OPTION&lt;span class="o"&gt;]&lt;/span&gt;

object_type:
    TABLE
  &lt;span class="p"&gt;|&lt;/span&gt; FUNCTION
  &lt;span class="p"&gt;|&lt;/span&gt; PROCEDURE

priv_level:
    *
  &lt;span class="p"&gt;|&lt;/span&gt; *.*
  &lt;span class="p"&gt;|&lt;/span&gt; db_name.*
  &lt;span class="p"&gt;|&lt;/span&gt; db_name.tbl_name
  &lt;span class="p"&gt;|&lt;/span&gt; tbl_name
  &lt;span class="p"&gt;|&lt;/span&gt; db_name.routine_name

user_specification:
    user
    &lt;span class="o"&gt;[&lt;/span&gt;
        IDENTIFIED BY &lt;span class="o"&gt;[&lt;/span&gt;PASSWORD&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; IDENTIFIED WITH auth_plugin &lt;span class="o"&gt;[&lt;/span&gt;AS &lt;span class="s1"&gt;&amp;#39;auth_string&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;

ssl_option:
    SSL
  &lt;span class="p"&gt;|&lt;/span&gt; X509
  &lt;span class="p"&gt;|&lt;/span&gt; CIPHER &lt;span class="s1"&gt;&amp;#39;cipher&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; ISSUER &lt;span class="s1"&gt;&amp;#39;issuer&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; SUBJECT &lt;span class="s1"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;

with_option:
    GRANT OPTION
  &lt;span class="p"&gt;|&lt;/span&gt; MAX_QUERIES_PER_HOUR count
  &lt;span class="p"&gt;|&lt;/span&gt; MAX_UPDATES_PER_HOUR count
  &lt;span class="p"&gt;|&lt;/span&gt; MAX_CONNECTIONS_PER_HOUR count
  &lt;span class="p"&gt;|&lt;/span&gt; MAX_USER_CONNECTIONS count
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL&lt;/li&gt;
&lt;li&gt;databasename：数据库名&lt;/li&gt;
&lt;li&gt;tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用&lt;em&gt;表示，如&lt;/em&gt;.*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给用户zjc授予权限&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grant all on *.* to &amp;#39;zjc&amp;#39;@&amp;#39;%&amp;#39;;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刷新权限&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;取消该用户的权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;revoke privilege ON databasename.tablename FROM &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;help查看详情&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; &lt;span class="nb"&gt;help&lt;/span&gt; revoke
Name: &lt;span class="s1"&gt;&amp;#39;REVOKE&amp;#39;&lt;/span&gt;
Description:
Syntax:
REVOKE
    priv_type &lt;span class="o"&gt;[(&lt;/span&gt;column_list&lt;span class="o"&gt;)]&lt;/span&gt;
      &lt;span class="o"&gt;[&lt;/span&gt;, priv_type &lt;span class="o"&gt;[(&lt;/span&gt;column_list&lt;span class="o"&gt;)]]&lt;/span&gt; ...
    ON &lt;span class="o"&gt;[&lt;/span&gt;object_type&lt;span class="o"&gt;]&lt;/span&gt; priv_level
    FROM user &lt;span class="o"&gt;[&lt;/span&gt;, user&lt;span class="o"&gt;]&lt;/span&gt; ...

REVOKE ALL PRIVILEGES, GRANT OPTION
    FROM user &lt;span class="o"&gt;[&lt;/span&gt;, user&lt;span class="o"&gt;]&lt;/span&gt; ...

REVOKE PROXY ON user
    FROM user &lt;span class="o"&gt;[&lt;/span&gt;, user&lt;span class="o"&gt;]&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：同上面的授权部分&lt;/p&gt;
&lt;h2&gt;配置远程链接&lt;/h2&gt;
&lt;p&gt;找到配置文件中的[mysqld]一项&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# this is only for the mysqld standalone daemon&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# * Basic Settings&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="nv"&gt;user&lt;/span&gt;                    &lt;span class="o"&gt;=&lt;/span&gt; mysql
pid-file                &lt;span class="o"&gt;=&lt;/span&gt; /run/mysqld/mysqld.pid
&lt;span class="nv"&gt;socket&lt;/span&gt;                  &lt;span class="o"&gt;=&lt;/span&gt; /run/mysqld/mysqld.sock
&lt;span class="c1"&gt;#port                   = 3306&lt;/span&gt;
&lt;span class="nv"&gt;basedir&lt;/span&gt;                 &lt;span class="o"&gt;=&lt;/span&gt; /usr
&lt;span class="nv"&gt;datadir&lt;/span&gt;                 &lt;span class="o"&gt;=&lt;/span&gt; /var/lib/mysql
&lt;span class="nv"&gt;tmpdir&lt;/span&gt;                  &lt;span class="o"&gt;=&lt;/span&gt; /tmp
lc-messages-dir         &lt;span class="o"&gt;=&lt;/span&gt; /usr/share/mysql
&lt;span class="c1"&gt;#skip-external-locking&lt;/span&gt;
skip-name-resolve

&lt;span class="c1"&gt;# Instead of skip-networking the default is now to listen only on&lt;/span&gt;
&lt;span class="c1"&gt;# localhost which is more compatible and is not less secure.&lt;/span&gt;
&lt;span class="c1"&gt;# bind-address            = 127.0.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将&lt;strong&gt;bind-address&lt;/strong&gt; 注释掉,，然后重启数据库即可&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl restart mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;问题记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在尝试用 navicat连接的时候，出现（2013，XXXXXXXX）的错误，这样是由于mysql在接收到客户端链接的时候需要对dns进行反向解析，由于我实在局域网内，所有反向解析是不可能成功的。&lt;/p&gt;
&lt;p&gt;解决办法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把client的ip写在mysql服务器的/etc/hosts文件里，随便给个名字就可以了。&lt;/li&gt;
&lt;li&gt;在 my.cnf 中加入 &lt;strong&gt;skip-name-resolve&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于第一种方法比较笨，也不实用，那么 skip-name-resolve 选项可以禁用dns解析，但是，这样不能在mysql的授权表中使用主机名了，只能使用IP。&lt;/p&gt;
&lt;p&gt;什么是mysql的dns反解析&lt;/p&gt;
&lt;p&gt;mysql接收到连接请求后，获得的是客户端的ip，为了更好的匹配mysql.user里的权限记录（某些是用hostname定义的）。&lt;/p&gt;
&lt;p&gt;如果mysql服务器设置了dns服务器，并且客户端ip在dns上并没有相应的hostname，那么这个过程很慢，导致连接等待。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官方解释&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How MySQL&lt;/em&gt;
&lt;em&gt;uses DNS When a new thread connects to mysqld, mysqld will&lt;/em&gt;
&lt;em&gt;spawn a new thread to handle the request. This thread will first check&lt;/em&gt;
&lt;em&gt;if the hostname is in the hostname cache. If not the thread will call&lt;/em&gt;
&lt;em&gt;gethostbyaddr_r() and gethostbyname_r() to resolve the hostname. If&lt;/em&gt;
&lt;em&gt;the operating system doesn’t support the above thread-safe calls, the&lt;/em&gt;
&lt;em&gt;thread will lock a mutex and call gethostbyaddr() and gethostbyname()&lt;/em&gt;
&lt;em&gt;instead. Note that in this case no other thread can resolve other&lt;/em&gt;
&lt;em&gt;hostnames that is not in the hostname cache until the first thread is&lt;/em&gt;
&lt;em&gt;ready. You can disable DNS host lookup by starting mysqld with&lt;/em&gt;
&lt;em&gt;–skip-name-resolve. In this case you can however only use IP names in&lt;/em&gt;
&lt;em&gt;the MySQL privilege tables. If you have a very slow DNS and many&lt;/em&gt;
&lt;em&gt;hosts, you can get more performance by either disabling DNS lookop&lt;/em&gt;
&lt;em&gt;with –skip-name-resolve or by increasing the HOST_CACHE_SIZE define&lt;/em&gt;
&lt;em&gt;(default: 128) and recompile mysqld. You can disable the hostname&lt;/em&gt;
&lt;em&gt;cache with –skip-host-cache. You can clear the hostname cache with&lt;/em&gt;
&lt;em&gt;FLUSH HOSTS or mysqladmin flush-hosts. If you don’t want to allow&lt;/em&gt;
&lt;em&gt;connections over TCP/IP, you can do this by starting mysqld with&lt;/em&gt;
&lt;em&gt;–skip-networking.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据文档说明，如果你的mysql主机查询DNS很慢或是有很多客户端主机时会导致连接很慢，由于我们的开发机器是不能够连接外网的，所以DNS解析是不可能完成的，从而也就明白了为什么连接那么慢了。同时，请注意在增加该配置参数后，mysql的授权表中的host字段就不能够使用域名而只能够使用 ip地址了，因为这是禁止了域名解析的结果。&lt;/p&gt;</description><guid isPermaLink="false">mysql-remote-connection</guid><pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate></item><item><title>Linux中的软链接和硬链接</title><link>https://zorox.me/post/2020/Linux-hardlink-softlink.html</link><description>&lt;h2&gt;Linux文件系统&lt;/h2&gt;
&lt;p&gt;在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。&lt;/p&gt;
&lt;p&gt;换言之，&lt;strong&gt;UNIX 系统中除进程之外的一切皆是文件&lt;/strong&gt;，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。&lt;/p&gt;
&lt;h3&gt;Linux 系统的顶层目录结构&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;              &lt;span class="err"&gt;根目录&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;     &lt;span class="err"&gt;存放用户二进制文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;    &lt;span class="err"&gt;存放内核引导配置文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;     &lt;span class="err"&gt;存放设备文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;etc&lt;/span&gt;     &lt;span class="err"&gt;存放系统配置文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;    &lt;span class="err"&gt;用户主目录&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;     &lt;span class="err"&gt;动态共享库&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;lost&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;  &lt;span class="err"&gt;文件系统恢复时的恢复文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;media&lt;/span&gt;   &lt;span class="err"&gt;可卸载存储介质挂载点&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;mnt&lt;/span&gt;     &lt;span class="err"&gt;文件系统临时挂载点&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;     &lt;span class="err"&gt;附加的应用程序包&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;    &lt;span class="err"&gt;系统内存的映射目录，提供内核与进程信息&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="err"&gt;用户主目录&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;sbin&lt;/span&gt;    &lt;span class="err"&gt;存放系统二进制文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;srv&lt;/span&gt;     &lt;span class="err"&gt;存放服务相关数据&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;     &lt;span class="n"&gt;sys&lt;/span&gt; &lt;span class="err"&gt;虚拟文件系统挂载点&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;     &lt;span class="err"&gt;存放临时文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;usr&lt;/span&gt;     &lt;span class="err"&gt;存放用户应用程序&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt;     &lt;span class="err"&gt;存放邮件、系统日志等变化文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linux 与其他类 UNIX 系统一样并不区分文件与目录：目录是记录了其他文件名的文件。使用命令 mkdir 创建目录时，若期望创建的目录的名称与现有的文件名（或目录名）重复，则会创建失败。&lt;/p&gt;
&lt;h2&gt;硬链接与软链接的联系与区别&lt;/h2&gt;
&lt;p&gt;我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。&lt;/p&gt;
&lt;p&gt;在 Linux 系统中查看 inode 号可使用命令 stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="c1"&gt;# stat /home/harris/source/glibc-2.16.0.tar.xz&lt;/span&gt;
 File: &lt;span class="sb"&gt;`&lt;/span&gt;/home/harris/source/glibc-2.16.0.tar.xz&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
 Size: &lt;span class="m"&gt;9990512&lt;/span&gt;      Blocks: &lt;span class="m"&gt;19520&lt;/span&gt;      IO Block: &lt;span class="m"&gt;4096&lt;/span&gt;   regular file
Device: 807h/2055d      Inode: &lt;span class="m"&gt;2485677&lt;/span&gt;     Links: &lt;span class="m"&gt;1&lt;/span&gt;
Access: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0600&lt;/span&gt;/-rw-------&lt;span class="o"&gt;)&lt;/span&gt;  Uid: &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;/  harris&lt;span class="o"&gt;)&lt;/span&gt;   Gid: &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;/  harris&lt;span class="o"&gt;)&lt;/span&gt;
...
...
&lt;span class="c1"&gt;# ls -i -F /home/harris/Desktop/glibc.tar.xz&lt;/span&gt;
&lt;span class="m"&gt;2485677&lt;/span&gt; /home/harris/Desktop/glibc.tar.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。&lt;/p&gt;
&lt;h3&gt;创建硬链接&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;link oldfile newfile
ln oldfile newfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查找有相同 inode 号的文件&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df -i --print-type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件有相同的 inode 及 data block；&lt;/li&gt;
&lt;li&gt;只能对已存在的文件进行创建；&lt;/li&gt;
&lt;li&gt;不能交叉文件系统进行硬链接的创建；&lt;/li&gt;
&lt;li&gt;不能对目录进行创建，只可对文件创建；&lt;/li&gt;
&lt;li&gt;删除一个硬链接文件并不影响其他有相同 inode 号的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;硬链接不能对目录创建是受限于文件系统的设计。现 Linux 文件系统中的目录均隐藏了两个个特殊的目录：当前目录（.）与父目录（..）。查看这两个特殊目录的 inode 号可知其实这两目录就是两个硬链接。若系统允许对目录创建硬链接，则会产生目录环。&lt;/p&gt;
&lt;p&gt;软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的 inode 号以及用户数据块。因此软链接的创建与使用没有类似硬链接的诸多限制：
- 软链接有自己的文件属性及权限等；
- 可对不存在的文件或目录创建软链接；
- 软链接可交叉文件系统；
- 软链接可对文件或目录创建；
- 创建软链接时，链接计数 i_nlink 不会增加；
- 删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。&lt;/p&gt;
&lt;h3&gt;创建软连接&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln -s 源文件路径 目标路径
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们尝试对不存在的文件创建软连接&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ls -li&lt;/span&gt;
 total &lt;span class="m"&gt;0&lt;/span&gt;

 // 可对不存在的文件创建软链接
 &lt;span class="c1"&gt;# ln -s old.file soft.link&lt;/span&gt;
 &lt;span class="c1"&gt;# ls -liF&lt;/span&gt;
 total &lt;span class="m"&gt;0&lt;/span&gt;
 &lt;span class="m"&gt;789467&lt;/span&gt; lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;8&lt;/span&gt; Sep  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:00 soft.link -&amp;gt; old.file 

 // 由于被指向的文件不存在，此时的软链接 soft.link 就是死链接
 &lt;span class="c1"&gt;# cat soft.link &lt;/span&gt;
 cat: soft.link: No such file or directory 

 // 创建被指向的文件 old.file，soft.link 恢复成正常的软链接
 &lt;span class="c1"&gt;# echo &amp;quot;This is an original file_A&amp;quot; &amp;gt;&amp;gt; old.file&lt;/span&gt;
 &lt;span class="c1"&gt;# cat soft.link&lt;/span&gt;
 This is an original file_A

 // 对不存在的目录创建软链接
 &lt;span class="c1"&gt;# ln -s old.dir soft.link.dir&lt;/span&gt;
 &lt;span class="c1"&gt;# mkdir -p old.dir/test&lt;/span&gt;
 &lt;span class="c1"&gt;# tree . -F --inodes&lt;/span&gt;
 .
├── &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;789497&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  old.dir/
│   └── &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;789498&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  test/
├── &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;789495&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  old.file
├── &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;789495&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  soft.link -&amp;gt; old.file
└── &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;789497&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  soft.link.dir -&amp;gt; old.dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然软链接的用户数据也可以是另一个软链接的路径，其解析过程是递归的。但需注意：软链接创建时原文件的路径指向使用绝对路径较好。使用相对路径创建的软链接被移动后该软链接文件将成为一个死链接（如下所示的软链接 a 使用了相对路径，因此不宜被移动），因为链接数据块中记录的亦是相对路径指向。&lt;/p&gt;</description><guid isPermaLink="false">Linux-hardlink-softlink</guid><pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate></item></channel></rss>